// @flow
import deprecated from './_deprecated'

const errorStyles =
  'padding: 2px; font-weight: bold; background: red; color: black'
const warningStyles =
  'padding: 2px; font-weight: bold; background: gold; color: black'

function formatMessage(
  type: string,
  messageBody: string,
  moduleName: string = 'moduleName',
  modulePath: string = 'modulePath',
) {
  const header = `%c -- ${type.toUpperCase()} --------------------------------------------------- ${modulePath} -- `

  const body = `%c


${moduleName} %c${messageBody}

  `

  const info = `%c
Please see the documentation at %chttps://polished.js.org/docs/#${moduleName} %cfor more information.

  `

  return `${header}${body}${info}`
}

function generateHeaderStyles(type: string) {
  return type === 'error' ? errorStyles : warningStyles
}

/**
 * Handles the formatting of errors and warnings generated by modules.
 * @private
 */

function messageHandler(type: string, messageBody: string, modulePath: string) {
  const moduleName = modulePath.match(/([^/]+)(?=\.\w+$)/)[0]
  const message = formatMessage(type, messageBody, moduleName, modulePath)
  const headerStyles = generateHeaderStyles(type)
  if (type === 'error') {
    // eslint-disable-next-line no-console
    console.error(
      message,
      headerStyles,
      'color: black; font-weight: bold',
      'color: slategray',
      'color: slategray',
      'color: blue',
      'color: slategray',
    )
  } else {
    // eslint-disable-next-line no-console
    console.warn(
      message,
      headerStyles,
      'color: black',
      'color: slategray; font-weight: bold',
      'color: slategray',
      'color: blue',
      'color: slategray',
    )
  }
}

// eslint-disable-next-line import/prefer-default-export
export function deprecatedCheck(modulePath: string) {
  const deprecationInfo = deprecated[modulePath]
  if (deprecationInfo) {
    const messageBody = `will be deprecated as of version ${deprecationInfo.version} of âœ¨ polished. ${deprecationInfo.guidance}`
    messageHandler('warning', messageBody, modulePath)
  }
}
