// @flow
import deprecated from './_deprecated'

function formatMessage(
  type: string,
  messageBody: string,
  moduleName: string = 'moduleName',
  modulePath: string = 'modulePath',
) {
  const header = `%c ✨ ${type.toUpperCase()} ✨ ---- ${modulePath} --`

  const body = `%c

${moduleName} %c${messageBody}
  `

  const info = `%c
Please see the documentation at %chttps://polished.js.org/docs/#${moduleName}%c for more information.`

  return `${header}${body}${info}`
}

/**
 * Handles the formatting of errors and warnings generated by modules.
 * @private
 */

function messageHandler(type: string, messageBody: string, modulePath: string) {
  const moduleName = modulePath.match(/([^/]+)(?=\.\w+$)/)[0]
  const message = formatMessage(type, messageBody, moduleName, modulePath)
  const headerStyles = 'font-weight: bold; color: black'
  const messageStyles = [
    'color: black; font-size: 12px; font-weight: bold',
    'color: black; font-size: 12px',
    'color: gray; line-height: 1.4',
    'color: blue; line-height: 1.4',
    'color: gray; line-height: 1.4',
  ]

  if (type === 'error') {
    // eslint-disable-next-line no-console
    console.error(message, headerStyles, ...messageStyles)
  } else {
    // eslint-disable-next-line no-console
    console.warn(message, headerStyles, ...messageStyles)
  }
}

// eslint-disable-next-line import/prefer-default-export
export function deprecatedCheck(modulePath: string) {
  const deprecationInfo = deprecated[modulePath]
  if (deprecationInfo) {
    const messageBody = `will be deprecated as of version ${deprecationInfo.version} of ✨ polished. ${deprecationInfo.guidance}`
    messageHandler('warning', messageBody, modulePath)
  }
}
