const { parse } = require('url')
const { createServer } = require('http')
const next = require('next')

const dev = process.env.NODE_ENV !== 'production'
const app = next({ dev })
const handle = app.getRequestHandler()

app.prepare().then(() => {
  createServer((req, res) => {
    const url = parse(req.url, true)
    const { pathname, query } = url
    if (pathname !== '/') {
      // eslint-disable-next-line no-param-reassign
      req.utilities = [{"name":"Installation","description":{"type":"root","children":[{"type":"html","value":"<div class='installation'><code class='command'>npm install --save polished</code></div>","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":89,"offset":88},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":89,"offset":88}}},"markdown":false,"kind":"note","members":{"instance":[],"static":[]},"path":[{"name":"Installation","kind":"note"}],"namespace":"Installation"},{"name":"Mixins","kind":"note","members":{"instance":[],"static":[]},"path":[{"name":"Mixins","kind":"note"}],"namespace":"Mixins"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"CSS to contain a float (credit to CSSMojo).","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":44,"offset":43},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":44,"offset":43},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":44,"offset":43}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n   ...clearFix(),\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${clearFix()}\n`\n\n// CSS as JS Output\n\n'&::after': {\n  'clear': 'both',\n  'content': '',\n  'display': 'table'\n}","lineNumber":3}],"loc":{"start":{"line":3,"column":0},"end":{"line":24,"column":3}},"context":{"loc":{"start":{"line":26,"column":0},"end":{"line":35,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/clearFix.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/clearFix.js 00000026","code":"// @flow\n\n/**\n * CSS to contain a float (credit to CSSMojo).\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *    ...clearFix(),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${clearFix()}\n * `\n *\n * // CSS as JS Output\n *\n * '&::after': {\n *   'clear': 'both',\n *   'content': '',\n *   'display': 'table'\n * }\n */\n\nfunction clearFix(parent: string = '&') {\n  const pseudoSelector = `${parent}::after`\n  return {\n    [pseudoSelector]: {\n      'clear': 'both',\n      'content': '',\n      'display': 'table',\n    },\n  }\n}\n\nexport default clearFix\n","path":"src/mixins/clearFix.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/mixins/clearFix.js#L26-L35"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n   ...clearFix(),\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${clearFix()}\n`\n\n// CSS as JS Output\n\n'&::after': {\n  'clear': 'both',\n  'content': '',\n  'display': 'table'\n}"}],"name":"clearFix","kind":"function","params":[{"title":"param","name":"parent","default":"'&'","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"string"}}}],"members":{"instance":[],"static":[]},"path":[{"name":"clearFix","kind":"function"}],"namespace":"clearFix"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"CSS to represent truncated text with an ellipsis.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":50,"offset":49},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":50,"offset":49},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":50,"offset":49}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  ...ellipsis(250px)\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${ellipsis(250px)}\n\n\n// CSS as JS Output\n\ndiv: {\n  'display': 'inline-block',\n  'max-width': '250px',\n  'overflow': 'hidden',\n  'text-overflow': 'ellipsis',\n  'white-space': 'nowrap',\n  'word-wrap': 'normal'\n}","lineNumber":3}],"loc":{"start":{"line":3,"column":0},"end":{"line":27,"column":3}},"context":{"loc":{"start":{"line":29,"column":0},"end":{"line":38,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/ellipsis.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/ellipsis.js 00000029","code":"// @flow\n\n/**\n * CSS to represent truncated text with an ellipsis.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...ellipsis(250px)\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${ellipsis(250px)}\n *\n *\n * // CSS as JS Output\n *\n * div: {\n *   'display': 'inline-block',\n *   'max-width': '250px',\n *   'overflow': 'hidden',\n *   'text-overflow': 'ellipsis',\n *   'white-space': 'nowrap',\n *   'word-wrap': 'normal'\n * }\n */\n\nfunction ellipsis(width: string = '100%') {\n  return {\n    'display': 'inline-block',\n    'max-width': width,\n    'overflow': 'hidden',\n    'text-overflow': 'ellipsis',\n    'white-space': 'nowrap',\n    'word-wrap': 'normal',\n  }\n}\n\nexport default ellipsis\n","path":"src/mixins/ellipsis.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/mixins/ellipsis.js#L29-L38"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  ...ellipsis(250px)\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${ellipsis(250px)}\n\n\n// CSS as JS Output\n\ndiv: {\n  'display': 'inline-block',\n  'max-width': '250px',\n  'overflow': 'hidden',\n  'text-overflow': 'ellipsis',\n  'white-space': 'nowrap',\n  'word-wrap': 'normal'\n}"}],"name":"ellipsis","kind":"function","params":[{"title":"param","name":"width","default":"'100%'","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"string"}}}],"members":{"instance":[],"static":[]},"path":[{"name":"ellipsis","kind":"function"}],"namespace":"ellipsis"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"CSS for a @font-face declaration.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":34,"offset":33},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":34,"offset":33},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":34,"offset":33}}},"tags":[{"title":"example","description":"// Styles as object basic usage\nconst styles = {\n   ...fontFace({\n     'fontFamily': 'Sans-Pro'\n     'fontFilePath': 'path/to/file'\n   })\n}\n\n// styled-components basic usage\ninjectGlobals`${\n  fontFace({\n    'fontFamily': 'Sans-Pro'\n    'fontFilePath': 'path/to/file'\n  }\n)}`\n\n// CSS as JS Output\n\n'@font-face': {\n  'font-family': 'Sans-Pro',\n  'src': 'url(\"path/to/file.eot\"), url(\"path/to/file.woff2\"), url(\"path/to/file.woff\"), url(\"path/to/file.ttf\"), url(\"path/to/file.svg\")',\n}","lineNumber":3}],"loc":{"start":{"line":33,"column":0},"end":{"line":59,"column":3}},"context":{"loc":{"start":{"line":61,"column":0},"end":{"line":92,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/fontFace.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/fontFace.js 00000061","code":"// @flow\n\n/** */\ntype FontFaceConfiguration = {\n  fontFamily: string;\n  fontFilePath?: string;\n  fontStretch?: string;\n  fontStyle?: string;\n  fontVariant?: string;\n  fontWeight?: string;\n  fileFormats?: Array<string>;\n  localFonts?: Array<string>;\n  unicodeRange?: string\n}\n\nfunction generateFileReferences(fontFilePath: string, fileFormats: Array<string>) {\n  const fileFontReferences = fileFormats.map((format) => `url(\"${fontFilePath}.${format}\")`)\n  return fileFontReferences.join(', ')\n}\n\nfunction generateLocalReferences(localFonts: Array<string>) {\n  const localFontReferences = localFonts.map((font) => `local(\"${font}\")`)\n  return localFontReferences.join(', ')\n}\n\nfunction generateSources(fontFilePath?: string, localFonts?: Array<string>, fileFormats: Array<string>) {\n  const fontReferences = []\n  if (localFonts) fontReferences.push(generateLocalReferences(localFonts))\n  if (fontFilePath) fontReferences.push(generateFileReferences(fontFilePath, fileFormats))\n  return fontReferences.join(', ')\n}\n\n/**\n * CSS for a @font-face declaration.\n *\n * @example\n * // Styles as object basic usage\n * const styles = {\n *    ...fontFace({\n *      'fontFamily': 'Sans-Pro'\n *      'fontFilePath': 'path/to/file'\n *    })\n * }\n *\n * // styled-components basic usage\n * injectGlobals`${\n *   fontFace({\n *     'fontFamily': 'Sans-Pro'\n *     'fontFilePath': 'path/to/file'\n *   }\n * )}`\n *\n * // CSS as JS Output\n *\n * '@font-face': {\n *   'font-family': 'Sans-Pro',\n *   'src': 'url(\"path/to/file.eot\"), url(\"path/to/file.woff2\"), url(\"path/to/file.woff\"), url(\"path/to/file.ttf\"), url(\"path/to/file.svg\")',\n * }\n */\n\nfunction fontFace({\n    fontFamily,\n    fontFilePath,\n    fontStretch,\n    fontStyle,\n    fontVariant,\n    fontWeight,\n    fileFormats = ['eot', 'woff2', 'woff', 'ttf', 'svg'],\n    localFonts,\n    unicodeRange,\n  }: FontFaceConfiguration) {\n  // Error Handling\n  if (!fontFamily) throw new Error('fontFace expects a name of a font-family.')\n  if (!fontFilePath && !localFonts) throw new Error('fontFace expects either the path to the font file(s) or a name of a local copy.')\n  if (localFonts && !Array.isArray(localFonts)) throw new Error('fontFace expects localFonts to be an array.')\n  if (!Array.isArray(fileFormats)) throw new Error('fontFace expects fileFormats to be an array.')\n\n  const fontFaceDeclaration = {\n    '@font-face': {\n      'font-family': fontFamily,\n      'src': generateSources(fontFilePath, localFonts, fileFormats),\n      'unicode-range': unicodeRange,\n      'font-stretch': fontStretch,\n      'font-style': fontStyle,\n      'font-variant': fontVariant,\n      'font-weight': fontWeight,\n    },\n  }\n\n  // Removes undefined fields for cleaner css object.\n  return JSON.parse(JSON.stringify(fontFaceDeclaration))\n}\n\nexport default fontFace\n","path":"src/mixins/fontFace.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/mixins/fontFace.js#L61-L92"},"errors":[],"examples":[{"description":"// Styles as object basic usage\nconst styles = {\n   ...fontFace({\n     'fontFamily': 'Sans-Pro'\n     'fontFilePath': 'path/to/file'\n   })\n}\n\n// styled-components basic usage\ninjectGlobals`${\n  fontFace({\n    'fontFamily': 'Sans-Pro'\n    'fontFilePath': 'path/to/file'\n  }\n)}`\n\n// CSS as JS Output\n\n'@font-face': {\n  'font-family': 'Sans-Pro',\n  'src': 'url(\"path/to/file.eot\"), url(\"path/to/file.woff2\"), url(\"path/to/file.woff\"), url(\"path/to/file.ttf\"), url(\"path/to/file.svg\")',\n}"}],"name":"fontFace","kind":"function","params":[{"title":"param","name":"$0","type":{"type":"NameExpression","name":"Object"},"properties":[{"title":"param","name":"$0.fontFamily","lineNumber":62},{"title":"param","name":"$0.fontFilePath","lineNumber":63},{"title":"param","name":"$0.fontStretch","lineNumber":64},{"title":"param","name":"$0.fontStyle","lineNumber":65},{"title":"param","name":"$0.fontVariant","lineNumber":66},{"title":"param","name":"$0.fontWeight","lineNumber":67},{"title":"param","name":"$0.fileFormats","default":"['eot', 'woff2', 'woff', 'ttf', 'svg']"},{"title":"param","name":"$0.localFonts","lineNumber":69},{"title":"param","name":"$0.unicodeRange","lineNumber":70}]}],"members":{"instance":[],"static":[]},"path":[{"name":"fontFace","kind":"function"}],"namespace":"fontFace"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Generates a media query to target HiDPI devices.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":49,"offset":48},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":49,"offset":48},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":49,"offset":48}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n [hiDPI(1.5)]: {\n   width: 200px;\n }\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${hiDPI(1.5)} {\n    width: 200px;\n  }\n`\n\n// CSS as JS Output\n\n'@media only screen and (-webkit-min-device-pixel-ratio: 1.5),\n only screen and (min--moz-device-pixel-ratio: 1.5),\n only screen and (-o-min-device-pixel-ratio: 1.5/1),\n only screen and (min-resolution: 144dpi),\n only screen and (min-resolution: 1.5dppx)': {\n  'width': '200px',\n}","lineNumber":3}],"loc":{"start":{"line":3,"column":0},"end":{"line":30,"column":3}},"context":{"loc":{"start":{"line":32,"column":0},"end":{"line":40,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/hiDPI.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/hiDPI.js 00000032","code":"// @flow\n\n/**\n * Generates a media query to target HiDPI devices.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *  [hiDPI(1.5)]: {\n *    width: 200px;\n *  }\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${hiDPI(1.5)} {\n *     width: 200px;\n *   }\n * `\n *\n * // CSS as JS Output\n *\n * '@media only screen and (-webkit-min-device-pixel-ratio: 1.5),\n *  only screen and (min--moz-device-pixel-ratio: 1.5),\n *  only screen and (-o-min-device-pixel-ratio: 1.5/1),\n *  only screen and (min-resolution: 144dpi),\n *  only screen and (min-resolution: 1.5dppx)': {\n *   'width': '200px',\n * }\n */\n\nfunction hiDPI(ratio: number = 1.3) {\n  return `\n    @media only screen and (-webkit-min-device-pixel-ratio: ${ratio}),\n    only screen and (min--moz-device-pixel-ratio: ${ratio}),\n    only screen and (-o-min-device-pixel-ratio: ${ratio}/1),\n    only screen and (min-resolution: ${Math.round((ratio * 96))}dpi),\n    only screen and (min-resolution: ${ratio}dppx)\n  `\n}\n\nexport default hiDPI\n","path":"src/mixins/hiDPI.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/mixins/hiDPI.js#L32-L40"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n [hiDPI(1.5)]: {\n   width: 200px;\n }\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${hiDPI(1.5)} {\n    width: 200px;\n  }\n`\n\n// CSS as JS Output\n\n'@media only screen and (-webkit-min-device-pixel-ratio: 1.5),\n only screen and (min--moz-device-pixel-ratio: 1.5),\n only screen and (-o-min-device-pixel-ratio: 1.5/1),\n only screen and (min-resolution: 144dpi),\n only screen and (min-resolution: 1.5dppx)': {\n  'width': '200px',\n}"}],"name":"hiDPI","kind":"function","params":[{"title":"param","name":"ratio","default":"1.3","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"number"}}}],"members":{"instance":[],"static":[]},"path":[{"name":"hiDPI","kind":"function"}],"namespace":"hiDPI"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"CSS to hide text to show a background image in a SEO-Friendly.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":63,"offset":62},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":63,"offset":62},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":63,"offset":62}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  'background-image': 'url(logo.png)',\n  ...hideText(),\n}\n\n// styled-components usage\nconst div = styled.div`\n  background-image: url(logo.png);\n  ${hideText()};\n`\n\n// CSS as JS Output\n\n'div': {\n  'background-image': 'url(logo.png)',\n  'text-indent': '101%',\n  'overflow': 'hidden',\n  'white-space': 'nowrap',\n}","lineNumber":3}],"loc":{"start":{"line":3,"column":0},"end":{"line":27,"column":3}},"context":{"loc":{"start":{"line":29,"column":0},"end":{"line":35,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/hideText.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/hideText.js 00000029","code":"// @flow\n\n/**\n * CSS to hide text to show a background image in a SEO-Friendly.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   'background-image': 'url(logo.png)',\n *   ...hideText(),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background-image: url(logo.png);\n *   ${hideText()};\n * `\n *\n * // CSS as JS Output\n *\n * 'div': {\n *   'background-image': 'url(logo.png)',\n *   'text-indent': '101%',\n *   'overflow': 'hidden',\n *   'white-space': 'nowrap',\n * }\n */\n\nfunction hideText() {\n  return {\n    'text-indent': '101%',\n    'overflow': 'hidden',\n    'white-space': 'nowrap',\n  }\n}\n\nexport default hideText\n","path":"src/mixins/hideText.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/mixins/hideText.js#L29-L35"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  'background-image': 'url(logo.png)',\n  ...hideText(),\n}\n\n// styled-components usage\nconst div = styled.div`\n  background-image: url(logo.png);\n  ${hideText()};\n`\n\n// CSS as JS Output\n\n'div': {\n  'background-image': 'url(logo.png)',\n  'text-indent': '101%',\n  'overflow': 'hidden',\n  'white-space': 'nowrap',\n}"}],"name":"hideText","kind":"function","members":{"instance":[],"static":[]},"path":[{"name":"hideText","kind":"function"}],"namespace":"hideText"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"CSS to normalize abnormalities across browsers (normalize.css v5.0.0 | MIT License | github.com/necolas/normalize.css)","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":119,"offset":118},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":119,"offset":118},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":119,"offset":118}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n   ...normalize(),\n}\n\n// styled-components usage\ninjectGlobals`${normalize()}`\n\n// CSS as JS Output\n\nhtml {\n  font-family: sans-serif,\n  line-height: 1.15,\n  -ms-text-size-adjust: 100%,\n  -webkit-text-size-adjust: 100%,\n} ...","lineNumber":3}],"loc":{"start":{"line":271,"column":0},"end":{"line":291,"column":3}},"context":{"loc":{"start":{"line":293,"column":0},"end":{"line":296,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/normalize.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/normalize.js 00000293","code":"// @flow\nconst opinionatedRules = {\n  'html': {\n    'font-family': 'sans-serif',\n  },\n\n  'body': {\n    'margin': '0',\n  },\n\n  [`a:active,\n  a:hover`]: {\n    'outline-width': '0',\n  },\n\n  [`button,\n  input,\n  optgroup,\n  select,\n  textarea`]: {\n    'font-family': 'sans-serif',\n    'font-size': '100%',\n    'line-height': '1.15',\n  },\n\n}\n\nconst unopinionatedRules = {\n  'html': {\n    'line-height': '1.15',\n    '-ms-text-size-adjust': '100%',\n    '-webkit-text-size-adjust': '100%',\n  },\n\n  [`article,\n  aside,\n  footer,\n  header,\n  nav,\n  section`]: {\n    'display': 'block',\n  },\n\n  'h1': {\n    'font-size': '2em',\n    'margin': '0.67em 0',\n  },\n\n  [`figcaption,\n  figure,\n  main`]: {\n    'display': 'block',\n  },\n\n  'figure': {\n    'margin': '1em 40px',\n  },\n\n  'hr': {\n    'box-sizing': 'content-box',\n    'height': '0',\n    'overflow': 'visible',\n  },\n\n  'pre': {\n    'font-family': 'monospace, monospace',\n    'font-size': '1em',\n  },\n\n  'a': {\n    'background-color': 'transparent',\n    '-webkit-text-decoration-skip': 'objects',\n  },\n\n  'abbr[title]': {\n    'border-bottom': 'none',\n    'text-decoration': 'underline',\n    // eslint-disable-next-line no-dupe-keys\n    'text-decoration': 'underline dotted',\n  },\n\n  [`b,\n  strong`]: {\n    'font-weight': 'inherit',\n  },\n\n  [`code,\n  kbd,\n  samp`]: {\n    'font-family': 'monospace, monospace',\n    'font-size': '1em',\n  },\n\n  'dfn': {\n    'font-style': 'italic',\n  },\n\n  'mark': {\n    'background-color': '#ff0',\n    'color': '#000',\n  },\n\n  'small': {\n    'font-size': '80%',\n  },\n\n  [`sub,\n  sup`]: {\n    'font-size': '75%',\n    'line-height': '0',\n    'position': 'relative',\n    'vertical-align': 'baseline',\n  },\n\n  'sub': {\n    'bottom': '-0.25em',\n  },\n\n  'sup': {\n    'top': '-0.5em',\n  },\n\n  [`audio,\n  video`]: {\n    'display': 'inline-block',\n  },\n\n  'audio:not([controls])': {\n    'display': 'none',\n    'height': '0',\n  },\n\n  'img': {\n    'border-style': 'none',\n  },\n\n  'svg:not(:root)': {\n    'overflow': 'hidden',\n  },\n\n  [`button,\n  input,\n  optgroup,\n  select,\n  textarea`]: {\n    'margin': '0',\n  },\n\n  [`button,\n  input`]: {\n    'overflow': 'visible',\n  },\n\n  [`button,\n  select`]: {\n    'text-transform': 'none',\n  },\n\n  [`button,\n  html [type=\"button\"],\n  [type=\"reset\"],\n  [type=\"submit\"]`]: {\n    '-webkit-appearance': 'button',\n  },\n\n  [`button::-moz-focus-inner,\n  [type=\"button\"]::-moz-focus-inner,\n  [type=\"reset\"]::-moz-focus-inner,\n  [type=\"submit\"]::-moz-focus-inner`]: {\n    'border-style': 'none',\n    'padding': '0',\n  },\n\n  [`button:-moz-focusring,\n  [type=\"button\"]:-moz-focusring,\n  [type=\"reset\"]:-moz-focusring,\n  [type=\"submit\"]:-moz-focusring`]: {\n    'outline': '1px dotted ButtonText',\n  },\n\n  'fieldset': {\n    'border': '1px solid #c0c0c0',\n    'margin': '0 2px',\n    'padding': '0.35em 0.625em 0.75em',\n  },\n\n  'legend': {\n    'box-sizing': 'border-box',\n    'color': 'inherit',\n    'display': 'table',\n    'max-width': '100%',\n    'padding': '0',\n    'white-space': 'normal',\n  },\n\n  'progress': {\n    'display': 'inline-block',\n    'vertical-align': 'baseline',\n  },\n\n  'textarea': {\n    'overflow': 'auto',\n  },\n\n  [`[type=\"checkbox\"],\n  [type=\"radio\"]`]: {\n    'box-sizing': 'border-box',\n    'padding': '0',\n  },\n\n  [`[type=\"number\"]::-webkit-inner-spin-button,\n  [type=\"number\"]::-webkit-outer-spin-button`]: {\n    'height': 'auto',\n  },\n\n  '[type=\"search\"]': {\n    '-webkit-appearance': 'textfield',\n    'outline-offset': '-2px',\n  },\n\n  [`[type=\"search\"]::-webkit-search-cancel-button,\n  [type=\"search\"]::-webkit-search-decoration`]: {\n    '-webkit-appearance': 'none',\n  },\n\n  '::-webkit-file-upload-button': {\n    '-webkit-appearance': 'button',\n    'font': 'inherit',\n  },\n\n  [`details,\n  menu`]: {\n    'display': 'block',\n  },\n\n  'summary': {\n    'display': 'list-item',\n  },\n\n  'canvas': {\n    'display': 'inline-block',\n  },\n\n  'template': {\n    'display': 'none',\n  },\n\n  '[hidden]': {\n    'display': 'none',\n  },\n\n}\n\nfunction mergeRules(baseRules: Object, additionalRules: Object) {\n  const mergedRules = { ...baseRules }\n  Object.keys(additionalRules).forEach((key) => {\n    if (mergedRules[key]) {\n      mergedRules[key] = {\n        ...mergedRules[key],\n        ...additionalRules[key],\n      }\n    } else {\n      mergedRules[key] = {\n        ...additionalRules[key],\n      }\n    }\n  })\n  return mergedRules\n}\n\n/**\n * CSS to normalize abnormalities across browsers (normalize.css v5.0.0 | MIT License | github.com/necolas/normalize.css)\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *    ...normalize(),\n * }\n *\n * // styled-components usage\n * injectGlobals`${normalize()}`\n *\n * // CSS as JS Output\n *\n * html {\n *   font-family: sans-serif,\n *   line-height: 1.15,\n *   -ms-text-size-adjust: 100%,\n *   -webkit-text-size-adjust: 100%,\n * } ...\n */\n\nfunction normalize(excludeOpinionated?: boolean) {\n  if (excludeOpinionated) return unopinionatedRules\n  return mergeRules(unopinionatedRules, opinionatedRules)\n}\n\nexport default normalize\n\n","path":"src/mixins/normalize.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/mixins/normalize.js#L293-L296"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n   ...normalize(),\n}\n\n// styled-components usage\ninjectGlobals`${normalize()}`\n\n// CSS as JS Output\n\nhtml {\n  font-family: sans-serif,\n  line-height: 1.15,\n  -ms-text-size-adjust: 100%,\n  -webkit-text-size-adjust: 100%,\n} ..."}],"name":"normalize","kind":"function","params":[{"title":"param","name":"excludeOpinionated","lineNumber":293,"type":{"type":"NameExpression","name":"boolean"}}],"members":{"instance":[],"static":[]},"path":[{"name":"normalize","kind":"function"}],"namespace":"normalize"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"CSS to style the selection psuedo-element.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":43,"offset":42},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":43,"offset":42},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":43,"offset":42}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  ...placeholder(styles)\n}\n\n// styled-components usage\nconst div = styled.input`\n   ${placeholder(css`styles`)}\n`\n\n// CSS as JS Output\n\n'input': {\n  '&:-moz-placeholder': {\n    'color': 'blue',\n  },\n  '&:-ms-input-placeholder': {\n    'color': 'blue',\n  },\n  '&::-moz-placeholder': {\n    'color': 'blue',\n  },\n  '&::-webkit-input-placeholder': {\n    'color': 'blue',\n  },\n},","lineNumber":3}],"loc":{"start":{"line":3,"column":0},"end":{"line":33,"column":3}},"context":{"loc":{"start":{"line":35,"column":0},"end":{"line":50,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/placeholder.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/placeholder.js 00000035","code":"// @flow\n\n/**\n * CSS to style the selection psuedo-element.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...placeholder(styles)\n * }\n *\n * // styled-components usage\n * const div = styled.input`\n *    ${placeholder(css`styles`)}\n * `\n *\n * // CSS as JS Output\n *\n * 'input': {\n *   '&:-moz-placeholder': {\n *     'color': 'blue',\n *   },\n *   '&:-ms-input-placeholder': {\n *     'color': 'blue',\n *   },\n *   '&::-moz-placeholder': {\n *     'color': 'blue',\n *   },\n *   '&::-webkit-input-placeholder': {\n *     'color': 'blue',\n *   },\n * },\n */\n\nfunction placeholder(styles: Object, parent: string = '&') {\n  return {\n    [`${parent}::-webkit-input-placeholder`]: {\n      ...styles,\n    },\n    [`${parent}:-moz-placeholder`]: {\n      ...styles,\n    },\n    [`${parent}::-moz-placeholder`]: {\n      ...styles,\n    },\n    [`${parent}:-ms-input-placeholder`]: {\n      ...styles,\n    },\n  }\n}\n\nexport default placeholder\n","path":"src/mixins/placeholder.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/mixins/placeholder.js#L35-L50"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  ...placeholder(styles)\n}\n\n// styled-components usage\nconst div = styled.input`\n   ${placeholder(css`styles`)}\n`\n\n// CSS as JS Output\n\n'input': {\n  '&:-moz-placeholder': {\n    'color': 'blue',\n  },\n  '&:-ms-input-placeholder': {\n    'color': 'blue',\n  },\n  '&::-moz-placeholder': {\n    'color': 'blue',\n  },\n  '&::-webkit-input-placeholder': {\n    'color': 'blue',\n  },\n},"}],"name":"placeholder","kind":"function","params":[{"title":"param","name":"styles","lineNumber":35,"type":{"type":"NameExpression","name":"Object"}},{"title":"param","name":"parent","default":"'&'","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"string"}}}],"members":{"instance":[],"static":[]},"path":[{"name":"placeholder","kind":"function"}],"namespace":"placeholder"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"CSS for declaring a radial gradient, including a fallback background-color. The fallback is either the first color-stop or an explicitly passed fallback color.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":160,"offset":159},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":160,"offset":159},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":160,"offset":159}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  ...radialGradient({\n    colorStops: ['#00FFFF 0%', 'rgba(0, 0, 255, 0) 50%', '#0000FF 95%'],\n    extent: 'farthest-corner at 45px 45px',\n    position: 'center',\n    shape: 'ellipse',\n  })\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${radialGradient({\n    colorStops: ['#00FFFF 0%', 'rgba(0, 0, 255, 0) 50%', '#0000FF 95%'],\n    extent: 'farthest-corner at 45px 45px',\n    position: 'center',\n    shape: 'ellipse',\n  })}\n`\n\n// CSS as JS Output\n\ndiv: {\n  'background-color': '#00FFFF',\n  'background-image': 'radial-gradient(center ellipse farthest-corner at 45px 45px, #00FFFF 0%, rgba(0, 0, 255, 0) 50%, #0000FF 95%)',\n}","lineNumber":3}],"loc":{"start":{"line":35,"column":0},"end":{"line":65,"column":3}},"context":{"loc":{"start":{"line":67,"column":0},"end":{"line":79,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/radialGradient.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/radialGradient.js 00000067","code":"// @flow\n\n/** */\ntype RadialGradientConfiguration = {\n  colorStops: Array<string>;\n  extent?: string;\n  fallback?: string;\n  position?: string;\n  shape?: string;\n};\n\nfunction parseFallback(colorStops: Array<string>) {\n  return colorStops[0].split(' ')[0]\n}\n\nfunction constructGradientValue(literals: Array<string>, ...substitutions: Array<string>) {\n  let template = ''\n  for (let i = 0; i < literals.length; i += 1) {\n    template += literals[i]\n    // Adds leading coma if properties preceed color-stops\n    if ((i === 3 && substitutions[i]) && (substitutions[0] || substitutions[1] || substitutions[2])) {\n      template = template.slice(0, -1)\n      template += `, ${substitutions[i]}`\n    // No trailing space if color-stops is the only param provided\n    } else if ((i === 3 && substitutions[i]) && (!substitutions[0] && !substitutions[1] && !substitutions[2])) {\n      template += `${substitutions[i]}`\n    // Only adds substitution if it is defined\n    } else if (substitutions[i]) {\n      template += `${substitutions[i]} `\n    }\n  }\n  return template.trim()\n}\n\n/**\n * CSS for declaring a radial gradient, including a fallback background-color. The fallback is either the first color-stop or an explicitly passed fallback color.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...radialGradient({\n *     colorStops: ['#00FFFF 0%', 'rgba(0, 0, 255, 0) 50%', '#0000FF 95%'],\n *     extent: 'farthest-corner at 45px 45px',\n *     position: 'center',\n *     shape: 'ellipse',\n *   })\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${radialGradient({\n *     colorStops: ['#00FFFF 0%', 'rgba(0, 0, 255, 0) 50%', '#0000FF 95%'],\n *     extent: 'farthest-corner at 45px 45px',\n *     position: 'center',\n *     shape: 'ellipse',\n *   })}\n *`\n *\n * // CSS as JS Output\n *\n * div: {\n *   'background-color': '#00FFFF',\n *   'background-image': 'radial-gradient(center ellipse farthest-corner at 45px 45px, #00FFFF 0%, rgba(0, 0, 255, 0) 50%, #0000FF 95%)',\n * }\n */\n\nfunction radialGradient({\n  colorStops,\n  extent,\n  fallback,\n  position,\n  shape,\n}: RadialGradientConfiguration) {\n  if (!colorStops || colorStops.length < 2) throw new Error('radialGradient requries at least 2 color-stops to properly render.')\n  return {\n    'background-color': fallback || parseFallback(colorStops),\n    'background-image': constructGradientValue`radial-gradient(${position}${shape}${extent}${colorStops.join(', ')})`,\n  }\n}\n\nexport default radialGradient\n","path":"src/mixins/radialGradient.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/mixins/radialGradient.js#L67-L79"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  ...radialGradient({\n    colorStops: ['#00FFFF 0%', 'rgba(0, 0, 255, 0) 50%', '#0000FF 95%'],\n    extent: 'farthest-corner at 45px 45px',\n    position: 'center',\n    shape: 'ellipse',\n  })\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${radialGradient({\n    colorStops: ['#00FFFF 0%', 'rgba(0, 0, 255, 0) 50%', '#0000FF 95%'],\n    extent: 'farthest-corner at 45px 45px',\n    position: 'center',\n    shape: 'ellipse',\n  })}\n`\n\n// CSS as JS Output\n\ndiv: {\n  'background-color': '#00FFFF',\n  'background-image': 'radial-gradient(center ellipse farthest-corner at 45px 45px, #00FFFF 0%, rgba(0, 0, 255, 0) 50%, #0000FF 95%)',\n}"}],"name":"radialGradient","kind":"function","params":[{"title":"param","name":"$0","type":{"type":"NameExpression","name":"Object"},"properties":[{"title":"param","name":"$0.colorStops","lineNumber":68},{"title":"param","name":"$0.extent","lineNumber":69},{"title":"param","name":"$0.fallback","lineNumber":70},{"title":"param","name":"$0.position","lineNumber":71},{"title":"param","name":"$0.shape","lineNumber":72}]}],"members":{"instance":[],"static":[]},"path":[{"name":"radialGradient","kind":"function"}],"namespace":"radialGradient"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"The retina-image mixin is a helper to generate a retina background image and non-retina\nbackground image. The retina background image will output to a HiDPI media query. The mixin uses\na _2x.png filename suffix by default.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":3,"column":38,"offset":222},"indent":[1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":3,"column":38,"offset":222},"indent":[1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":3,"column":38,"offset":222}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n ...retinaImage('my-img')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${retinaImage('my-img')}\n`\n\n// CSS as JS Output\ndiv {\n  backgroundImage: 'url(my-img.png)',\n  '@media only screen and (-webkit-min-device-pixel-ratio: 1.3),\n   only screen and (min--moz-device-pixel-ratio: 1.3),\n   only screen and (-o-min-device-pixel-ratio: 1.3/1),\n   only screen and (min-resolution: 144dpi),\n   only screen and (min-resolution: 1.5dppx)': {\n    backgroundImage: 'url(my-img_2x.png)',\n  }\n}","lineNumber":5}],"loc":{"start":{"line":5,"column":0},"end":{"line":32,"column":3}},"context":{"loc":{"start":{"line":33,"column":0},"end":{"line":48,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/retinaImage.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/retinaImage.js 00000033","code":"// @flow\n\nimport hiDPI from './hiDPI'\n\n/**\n * The retina-image mixin is a helper to generate a retina background image and non-retina\n * background image. The retina background image will output to a HiDPI media query. The mixin uses\n * a _2x.png filename suffix by default.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *  ...retinaImage('my-img')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${retinaImage('my-img')}\n * `\n *\n * // CSS as JS Output\n * div {\n *   backgroundImage: 'url(my-img.png)',\n *   '@media only screen and (-webkit-min-device-pixel-ratio: 1.3),\n *    only screen and (min--moz-device-pixel-ratio: 1.3),\n *    only screen and (-o-min-device-pixel-ratio: 1.3/1),\n *    only screen and (min-resolution: 144dpi),\n *    only screen and (min-resolution: 1.5dppx)': {\n *     backgroundImage: 'url(my-img_2x.png)',\n *   }\n * }\n */\nfunction retinaImage(filename: string, backgroundSize?: string, extension?: string = 'png', retinaFilename?: string, retinaSuffix?: string = '_2x') {\n  if (!filename) {\n    throw new Error('Please supply a filename to retinaImage() as the first argument.')\n  }\n  // Replace the dot at the beginning of the passed extension if one exists\n  const ext = extension.replace(/^\\./, '')\n  const rFilename = retinaFilename ? `${retinaFilename}.${ext}` : `${filename}${retinaSuffix}.${ext}`\n\n  return {\n    backgroundImage: `url(${filename}.${ext})`,\n    [hiDPI()]: {\n      backgroundImage: `url(${rFilename})`,\n      backgroundSize,\n    },\n  }\n}\n\nexport default retinaImage\n","path":"src/mixins/retinaImage.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/mixins/retinaImage.js#L33-L48"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n ...retinaImage('my-img')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${retinaImage('my-img')}\n`\n\n// CSS as JS Output\ndiv {\n  backgroundImage: 'url(my-img.png)',\n  '@media only screen and (-webkit-min-device-pixel-ratio: 1.3),\n   only screen and (min--moz-device-pixel-ratio: 1.3),\n   only screen and (-o-min-device-pixel-ratio: 1.3/1),\n   only screen and (min-resolution: 144dpi),\n   only screen and (min-resolution: 1.5dppx)': {\n    backgroundImage: 'url(my-img_2x.png)',\n  }\n}"}],"name":"retinaImage","kind":"function","params":[{"title":"param","name":"filename","lineNumber":33,"type":{"type":"NameExpression","name":"string"}},{"title":"param","name":"backgroundSize","lineNumber":33,"type":{"type":"NameExpression","name":"string"}},{"title":"param","name":"extension","default":"'png'","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"string"}}},{"title":"param","name":"retinaFilename","lineNumber":33,"type":{"type":"NameExpression","name":"string"}},{"title":"param","name":"retinaSuffix","default":"'_2x'","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"string"}}}],"members":{"instance":[],"static":[]},"path":[{"name":"retinaImage","kind":"function"}],"namespace":"retinaImage"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"CSS to style the selection psuedo-element.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":43,"offset":42},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":43,"offset":42},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":43,"offset":42}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  ...selection({\n    'background': 'blue'\n  }, 'section')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${selection({'background': 'blue'}, 'section')}\n`\n\n// CSS as JS Output\n\n'div': {\n  'section::-moz-selection': {\n    'background-color':'blue',\n  },\n  'section::selection': {\n    'background-color': 'blue',\n  }\n}","lineNumber":3}],"loc":{"start":{"line":3,"column":0},"end":{"line":29,"column":3}},"context":{"loc":{"start":{"line":31,"column":0},"end":{"line":40,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/selection.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/selection.js 00000031","code":"// @flow\n\n/**\n * CSS to style the selection psuedo-element.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...selection({\n *     'background': 'blue'\n *   }, 'section')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${selection({'background': 'blue'}, 'section')}\n * `\n *\n * // CSS as JS Output\n *\n * 'div': {\n *   'section::-moz-selection': {\n *     'background-color':'blue',\n *   },\n *   'section::selection': {\n *     'background-color': 'blue',\n *   }\n * }\n */\n\nfunction selection(styles: Object, parent: string = '') {\n  return {\n    [`${parent}::-moz-selection`]: {\n      ...styles,\n    },\n    [`${parent}::selection`]: {\n      ...styles,\n    },\n  }\n}\n\nexport default selection\n","path":"src/mixins/selection.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/mixins/selection.js#L31-L40"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  ...selection({\n    'background': 'blue'\n  }, 'section')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${selection({'background': 'blue'}, 'section')}\n`\n\n// CSS as JS Output\n\n'div': {\n  'section::-moz-selection': {\n    'background-color':'blue',\n  },\n  'section::selection': {\n    'background-color': 'blue',\n  }\n}"}],"name":"selection","kind":"function","params":[{"title":"param","name":"styles","lineNumber":31,"type":{"type":"NameExpression","name":"Object"}},{"title":"param","name":"parent","default":"''","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"string"}}}],"members":{"instance":[],"static":[]},"path":[{"name":"selection","kind":"function"}],"namespace":"selection"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"String to represent commong easing functions as demonstrated here: (github.com/jaukia/easie).","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":94,"offset":93},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":94,"offset":93},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":94,"offset":93}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  'transition-timing-function': timingFunctions('easeInQuad')\n}\n\n// styled-components usage\n const div = styled.div`\n  transition-timing-function: ${timingFunctions('easeInQuad')};\n`\n\n// CSS as JS Output\n\n'div': {\n  'transition-timing-function': 'cubic-bezier(0.550,  0.085, 0.680, 0.530)',\n}","lineNumber":3}],"loc":{"start":{"line":61,"column":0},"end":{"line":80,"column":3}},"context":{"loc":{"start":{"line":82,"column":0},"end":{"line":84,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/timingFunctions.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/timingFunctions.js 00000082","code":"// @flow\n\n/* eslint-disable key-spacing */\nconst functionsMap = {\n  'easeInBack':     'cubic-bezier(0.600, -0.280, 0.735, 0.045)',\n  'easeInCirc':     'cubic-bezier(0.600,  0.040, 0.980, 0.335)',\n  'easeInCubic':    'cubic-bezier(0.550,  0.055, 0.675, 0.190)',\n  'easeInExpo':     'cubic-bezier(0.950,  0.050, 0.795, 0.035)',\n  'easeInQuad':     'cubic-bezier(0.550,  0.085, 0.680, 0.530)',\n  'easeInQuart':    'cubic-bezier(0.895,  0.030, 0.685, 0.220)',\n  'easeInQuint':    'cubic-bezier(0.755,  0.050, 0.855, 0.060)',\n  'easeInSine':     'cubic-bezier(0.470,  0.000, 0.745, 0.715)',\n\n  'easeOutBack':    'cubic-bezier(0.175,  0.885, 0.320, 1.275)',\n  'easeOutCubic':   'cubic-bezier(0.215,  0.610, 0.355, 1.000)',\n  'easeOutCirc':    'cubic-bezier(0.075,  0.820, 0.165, 1.000)',\n  'easeOutExpo':    'cubic-bezier(0.190,  1.000, 0.220, 1.000)',\n  'easeOutQuad':    'cubic-bezier(0.250,  0.460, 0.450, 0.940)',\n  'easeOutQuart':   'cubic-bezier(0.165,  0.840, 0.440, 1.000)',\n  'easeOutQuint':   'cubic-bezier(0.230,  1.000, 0.320, 1.000)',\n  'easeOutSine':    'cubic-bezier(0.390,  0.575, 0.565, 1.000)',\n\n  'easeInOutBack':  'cubic-bezier(0.680, -0.550, 0.265, 1.550)',\n  'easeInOutCirc':  'cubic-bezier(0.785,  0.135, 0.150, 0.860)',\n  'easeInOutCubic': 'cubic-bezier(0.645,  0.045, 0.355, 1.000)',\n  'easeInOutExpo':  'cubic-bezier(1.000,  0.000, 0.000, 1.000)',\n  'easeInOutQuad':  'cubic-bezier(0.455,  0.030, 0.515, 0.955)',\n  'easeInOutQuart': 'cubic-bezier(0.770,  0.000, 0.175, 1.000)',\n  'easeInOutQuint': 'cubic-bezier(0.860,  0.000, 0.070, 1.000)',\n  'easeInOutSine':  'cubic-bezier(0.445,  0.050, 0.550, 0.950)',\n}\n/* eslint-enable key-spacing */\n\n/** */\ntype TimingFunction =\n  | 'easeInBack'\n  | 'easeInCirc'\n  | 'easeInCubic'\n  | 'easeInExpo'\n  | 'easeInQuad'\n  | 'easeInQuart'\n  | 'easeInQuint'\n  | 'easeInSine'\n  | 'easeOutBack'\n  | 'easeOutCubic'\n  | 'easeOutCirc'\n  | 'easeOutExpo'\n  | 'easeOutQuad'\n  | 'easeOutQuart'\n  | 'easeOutQuint'\n  | 'easeOutSine'\n  | 'easeInOutBack'\n  | 'easeInOutCirc'\n  | 'easeInOutCubic'\n  | 'easeInOutExpo'\n  | 'easeInOutQuad'\n  | 'easeInOutQuart'\n  | 'easeInOutQuint'\n  | 'easeInOutSine';\n\n/**\n * String to represent commong easing functions as demonstrated here: (github.com/jaukia/easie).\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   'transition-timing-function': timingFunctions('easeInQuad')\n * }\n *\n * // styled-components usage\n *  const div = styled.div`\n *   transition-timing-function: ${timingFunctions('easeInQuad')};\n * `\n *\n * // CSS as JS Output\n *\n * 'div': {\n *   'transition-timing-function': 'cubic-bezier(0.550,  0.085, 0.680, 0.530)',\n * }\n */\n\nfunction timingFunctions(timingFunction: TimingFunction) {\n  return functionsMap[timingFunction]\n}\n\nexport default timingFunctions\n","path":"src/mixins/timingFunctions.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/mixins/timingFunctions.js#L82-L84"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  'transition-timing-function': timingFunctions('easeInQuad')\n}\n\n// styled-components usage\n const div = styled.div`\n  transition-timing-function: ${timingFunctions('easeInQuad')};\n`\n\n// CSS as JS Output\n\n'div': {\n  'transition-timing-function': 'cubic-bezier(0.550,  0.085, 0.680, 0.530)',\n}"}],"name":"timingFunctions","kind":"function","params":[{"title":"param","name":"timingFunction","lineNumber":82,"type":{"type":"NameExpression","name":"TimingFunction"}}],"members":{"instance":[],"static":[]},"path":[{"name":"timingFunctions","kind":"function"}],"namespace":"timingFunctions"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Provides an easy way to change the ","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":36,"offset":35},"indent":[]}},{"type":"inlineCode","value":"word-wrap","position":{"start":{"line":1,"column":36,"offset":35},"end":{"line":1,"column":47,"offset":46},"indent":[]}},{"type":"text","value":" property","position":{"start":{"line":1,"column":47,"offset":46},"end":{"line":1,"column":56,"offset":55},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":56,"offset":55},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":56,"offset":55}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  ...wordWrap('break-all')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${wordWrap('break-all')}\n\n\n// CSS as JS Output\n\nconst styles = {\n  overflow-wrap: 'break-all',\n  word-wrap: 'break-all',\n  word-break: 'break-all',\n}","lineNumber":3}],"loc":{"start":{"line":3,"column":0},"end":{"line":24,"column":3}},"context":{"loc":{"start":{"line":26,"column":0},"end":{"line":33,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/wordWrap.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/wordWrap.js 00000026","code":"// @flow\n\n/**\n * Provides an easy way to change the `word-wrap` property\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...wordWrap('break-all')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${wordWrap('break-all')}\n *\n *\n * // CSS as JS Output\n *\n * const styles = {\n *   overflow-wrap: 'break-all',\n *   word-wrap: 'break-all',\n *   word-break: 'break-all',\n * }\n */\n\nfunction wordWrap(wrap: string = 'break-word') {\n  const wordBreak = wrap === 'break-word' ? 'break-all' : wrap\n  return {\n    'overflow-wrap': wrap,\n    'word-wrap': wrap,\n    'word-break': wordBreak,\n  }\n}\n\nexport default wordWrap\n","path":"src/mixins/wordWrap.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/mixins/wordWrap.js#L26-L33"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  ...wordWrap('break-all')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${wordWrap('break-all')}\n\n\n// CSS as JS Output\n\nconst styles = {\n  overflow-wrap: 'break-all',\n  word-wrap: 'break-all',\n  word-break: 'break-all',\n}"}],"name":"wordWrap","kind":"function","params":[{"title":"param","name":"wrap","default":"'break-word'","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"string"}}}],"members":{"instance":[],"static":[]},"path":[{"name":"wordWrap","kind":"function"}],"namespace":"wordWrap"},{"name":"Color","kind":"note","members":{"instance":[],"static":[]},"path":[{"name":"Color","kind":"note"}],"namespace":"Color"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Returns a string value for the color. The returned result is the smallest possible hex notation.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":97,"offset":96},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":97,"offset":96},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":97,"offset":96}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  background: rgb(255, 205, 100),\n  background: rgb({ red: 255, green: 205, blue: 100 }),\n}\n\n// styled-components usage\nconst div = styled.div`\n  background: ${rgb(255, 205, 100)};\n  background: ${rgb({ red: 255, green: 205, blue: 100 })};\n`\n\n// CSS in JS Output\n\nelement {\n  background: \"#ffcd64\";\n  background: \"#ffcd64\";\n}","lineNumber":3}],"loc":{"start":{"line":7,"column":0},"end":{"line":29,"column":3}},"context":{"loc":{"start":{"line":30,"column":0},"end":{"line":38,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/color/rgb.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/color/rgb.js 00000030","code":"// @flow\n\nimport reduceHexValue from '../internalHelpers/_reduceHexValue'\nimport toHex from '../internalHelpers/_numberToHex'\nimport type { RgbColor } from '../types/color'\n\n/**\n * Returns a string value for the color. The returned result is the smallest possible hex notation.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: rgb(255, 205, 100),\n *   background: rgb({ red: 255, green: 205, blue: 100 }),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${rgb(255, 205, 100)};\n *   background: ${rgb({ red: 255, green: 205, blue: 100 })};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#ffcd64\";\n *   background: \"#ffcd64\";\n * }\n */\nfunction rgb(value: RgbColor | number, green?: number, blue?: number): string {\n  if (typeof value === 'number' && typeof green === 'number' && typeof blue === 'number') {\n    return reduceHexValue(`#${toHex(value)}${toHex(green)}${toHex(blue)}`)\n  } else if (typeof value === 'object' && green === undefined && blue === undefined) {\n    return reduceHexValue(`#${toHex(value.red)}${toHex(value.green)}${toHex(value.blue)}`)\n  }\n\n  throw new Error('Passed invalid arguments to rgb, please pass multiple numbers e.g. rgb(255, 205, 100) or an object e.g. rgb({ red: 255, green: 205, blue: 100 }).')\n}\n\nexport default rgb\n","path":"src/color/rgb.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/color/rgb.js#L30-L38"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  background: rgb(255, 205, 100),\n  background: rgb({ red: 255, green: 205, blue: 100 }),\n}\n\n// styled-components usage\nconst div = styled.div`\n  background: ${rgb(255, 205, 100)};\n  background: ${rgb({ red: 255, green: 205, blue: 100 })};\n`\n\n// CSS in JS Output\n\nelement {\n  background: \"#ffcd64\";\n  background: \"#ffcd64\";\n}"}],"name":"rgb","kind":"function","params":[{"title":"param","name":"value","lineNumber":30,"type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"RgbColor"},{"type":"NameExpression","name":"number"}]}},{"title":"param","name":"green","lineNumber":30,"type":{"type":"NameExpression","name":"number"}},{"title":"param","name":"blue","lineNumber":30,"type":{"type":"NameExpression","name":"number"}}],"returns":[{"type":{"type":"NameExpression","name":"string"}}],"members":{"instance":[],"static":[]},"path":[{"name":"rgb","kind":"function"}],"namespace":"rgb"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Returns a string value for the color. The returned result is the smallest possible rgba or hex notation.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":105,"offset":104},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":105,"offset":104},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":105,"offset":104}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  background: rgba(255, 205, 100, 0.7),\n  background: rgba({ red: 255, green: 205, blue: 100, alpha: 0.7 }),\n  background: rgba(255, 205, 100, 1),\n}\n\n// styled-components usage\nconst div = styled.div`\n  background: ${rgba(255, 205, 100, 0.7)};\n  background: ${rgba({ red: 255, green: 205, blue: 100, alpha: 0.7 })};\n  background: ${rgba(255, 205, 100, 1)};\n`\n\n// CSS in JS Output\n\nelement {\n  background: \"rgba(255,205,100,0.7)\";\n  background: \"rgba(255,205,100,0.7)\";\n  background: \"#ffcd64\";\n}","lineNumber":3}],"loc":{"start":{"line":6,"column":0},"end":{"line":31,"column":3}},"context":{"loc":{"start":{"line":32,"column":0},"end":{"line":45,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/color/rgba.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/color/rgba.js 00000032","code":"// @flow\n\nimport rgb from './rgb'\nimport type { RgbaColor } from '../types/color'\n\n/**\n * Returns a string value for the color. The returned result is the smallest possible rgba or hex notation.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: rgba(255, 205, 100, 0.7),\n *   background: rgba({ red: 255, green: 205, blue: 100, alpha: 0.7 }),\n *   background: rgba(255, 205, 100, 1),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${rgba(255, 205, 100, 0.7)};\n *   background: ${rgba({ red: 255, green: 205, blue: 100, alpha: 0.7 })};\n *   background: ${rgba(255, 205, 100, 1)};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"rgba(255,205,100,0.7)\";\n *   background: \"rgba(255,205,100,0.7)\";\n *   background: \"#ffcd64\";\n * }\n */\nfunction rgba(value: RgbaColor | number, green?: number, blue?: number, alpha?: number): string {\n  if (typeof value === 'number' &&\n      typeof green === 'number' &&\n      typeof blue === 'number' &&\n      typeof alpha === 'number') {\n    return alpha >= 1 ? rgb(value, green, blue) : `rgba(${value},${green},${blue},${alpha})`\n  } else if (typeof value === 'object' && green === undefined && blue === undefined && alpha === undefined) {\n    return value.alpha >= 1\n      ? rgb(value.red, value.green, value.blue)\n      : `rgba(${value.red},${value.green},${value.blue},${value.alpha})`\n  }\n\n  throw new Error('Passed invalid arguments to rgba, please pass multiple numbers e.g. rgb(255, 205, 100, 0.75) or an object e.g. rgb({ red: 255, green: 205, blue: 100, alpha: 0.75 }).')\n}\n\nexport default rgba\n","path":"src/color/rgba.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/color/rgba.js#L32-L45"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  background: rgba(255, 205, 100, 0.7),\n  background: rgba({ red: 255, green: 205, blue: 100, alpha: 0.7 }),\n  background: rgba(255, 205, 100, 1),\n}\n\n// styled-components usage\nconst div = styled.div`\n  background: ${rgba(255, 205, 100, 0.7)};\n  background: ${rgba({ red: 255, green: 205, blue: 100, alpha: 0.7 })};\n  background: ${rgba(255, 205, 100, 1)};\n`\n\n// CSS in JS Output\n\nelement {\n  background: \"rgba(255,205,100,0.7)\";\n  background: \"rgba(255,205,100,0.7)\";\n  background: \"#ffcd64\";\n}"}],"name":"rgba","kind":"function","params":[{"title":"param","name":"value","lineNumber":32,"type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"RgbaColor"},{"type":"NameExpression","name":"number"}]}},{"title":"param","name":"green","lineNumber":32,"type":{"type":"NameExpression","name":"number"}},{"title":"param","name":"blue","lineNumber":32,"type":{"type":"NameExpression","name":"number"}},{"title":"param","name":"alpha","lineNumber":32,"type":{"type":"NameExpression","name":"number"}}],"returns":[{"type":{"type":"NameExpression","name":"string"}}],"members":{"instance":[],"static":[]},"path":[{"name":"rgba","kind":"function"}],"namespace":"rgba"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Returns a string value for the color. The returned result is the smallest possible hex notation.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":97,"offset":96},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":97,"offset":96},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":97,"offset":96}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  background: hsl(359, 0.75, 0.4),\n  background: hsl({ hue: 360, saturation: 0.75, lightness: 0.4 }),\n}\n\n// styled-components usage\nconst div = styled.div`\n  background: ${hsl(359, 0.75, 0.4)};\n  background: ${hsl({ hue: 360, saturation: 0.75, lightness: 0.4 })};\n`\n\n// CSS in JS Output\n\nelement {\n  background: \"#b3191c\";\n  background: \"#b3191c\";\n}","lineNumber":3}],"loc":{"start":{"line":6,"column":0},"end":{"line":28,"column":3}},"context":{"loc":{"start":{"line":29,"column":0},"end":{"line":37,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/color/hsl.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/color/hsl.js 00000029","code":"// @flow\n\nimport hslToHex from '../internalHelpers/_hslToHex'\nimport type { HslColor } from '../types/color'\n\n/**\n * Returns a string value for the color. The returned result is the smallest possible hex notation.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: hsl(359, 0.75, 0.4),\n *   background: hsl({ hue: 360, saturation: 0.75, lightness: 0.4 }),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${hsl(359, 0.75, 0.4)};\n *   background: ${hsl({ hue: 360, saturation: 0.75, lightness: 0.4 })};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#b3191c\";\n *   background: \"#b3191c\";\n * }\n */\nfunction hsl(value: HslColor | number, saturation?: number, lightness?: number): string {\n  if (typeof value === 'number' && typeof saturation === 'number' && typeof lightness === 'number') {\n    return hslToHex(value, saturation, lightness)\n  } else if (typeof value === 'object' && saturation === undefined && lightness === undefined) {\n    return hslToHex(value.hue, value.saturation, value.lightness)\n  }\n\n  throw new Error('Passed invalid arguments to hsl, please pass multiple numbers e.g. hsl(360, 0.75, 0.4) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75 }).')\n}\n\nexport default hsl\n","path":"src/color/hsl.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/color/hsl.js#L29-L37"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  background: hsl(359, 0.75, 0.4),\n  background: hsl({ hue: 360, saturation: 0.75, lightness: 0.4 }),\n}\n\n// styled-components usage\nconst div = styled.div`\n  background: ${hsl(359, 0.75, 0.4)};\n  background: ${hsl({ hue: 360, saturation: 0.75, lightness: 0.4 })};\n`\n\n// CSS in JS Output\n\nelement {\n  background: \"#b3191c\";\n  background: \"#b3191c\";\n}"}],"name":"hsl","kind":"function","params":[{"title":"param","name":"value","lineNumber":29,"type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"HslColor"},{"type":"NameExpression","name":"number"}]}},{"title":"param","name":"saturation","lineNumber":29,"type":{"type":"NameExpression","name":"number"}},{"title":"param","name":"lightness","lineNumber":29,"type":{"type":"NameExpression","name":"number"}}],"returns":[{"type":{"type":"NameExpression","name":"string"}}],"members":{"instance":[],"static":[]},"path":[{"name":"hsl","kind":"function"}],"namespace":"hsl"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Returns a string value for the color. The returned result is the smallest possible rgba or hex notation.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":105,"offset":104},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":105,"offset":104},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":105,"offset":104}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  background: hsla(359, 0.75, 0.4, 0.7),\n  background: hsla({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0,7 }),\n  background: hsla(359, 0.75, 0.4, 1),\n}\n\n// styled-components usage\nconst div = styled.div`\n  background: ${hsla(359, 0.75, 0.4, 0.7)};\n  background: ${hsla({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0,7 })};\n  background: ${hsla(359, 0.75, 0.4, 1)};\n`\n\n// CSS in JS Output\n\nelement {\n  background: \"rgba(179,25,28,0.7)\";\n  background: \"rgba(179,25,28,0.7)\";\n  background: \"#b3191c\";\n}","lineNumber":3}],"loc":{"start":{"line":7,"column":0},"end":{"line":32,"column":3}},"context":{"loc":{"start":{"line":33,"column":0},"end":{"line":55,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/color/hsla.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/color/hsla.js 00000033","code":"// @flow\n\nimport hslToHex from '../internalHelpers/_hslToHex'\nimport hslToRgb from '../internalHelpers/_hslToRgb'\nimport type { HslaColor } from '../types/color'\n\n/**\n * Returns a string value for the color. The returned result is the smallest possible rgba or hex notation.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: hsla(359, 0.75, 0.4, 0.7),\n *   background: hsla({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0,7 }),\n *   background: hsla(359, 0.75, 0.4, 1),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${hsla(359, 0.75, 0.4, 0.7)};\n *   background: ${hsla({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0,7 })};\n *   background: ${hsla(359, 0.75, 0.4, 1)};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"rgba(179,25,28,0.7)\";\n *   background: \"rgba(179,25,28,0.7)\";\n *   background: \"#b3191c\";\n * }\n */\nfunction hsla(value: HslaColor | number, saturation?: number, lightness?: number, alpha?: number): string {\n  if (\n    typeof value === 'number' &&\n    typeof saturation === 'number' &&\n    typeof lightness === 'number' &&\n    typeof alpha === 'number'\n  ) {\n    return alpha >= 1\n      ? hslToHex(value, saturation, lightness)\n      : `rgba(${hslToRgb(value, saturation, lightness)},${alpha})`\n  } else if (\n    typeof value === 'object' &&\n    saturation === undefined &&\n    lightness === undefined &&\n    alpha === undefined\n  ) {\n    return value.alpha >= 1\n      ? hslToHex(value.hue, value.saturation, value.lightness)\n      : `rgba(${hslToRgb(value.hue, value.saturation, value.lightness)},${value.alpha})`\n  }\n\n  throw new Error('Passed invalid arguments to hsla, please pass multiple numbers e.g. hsl(360, 0.75, 0.4, 0.7) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75, alpha: 0.7 }).')\n}\n\nexport default hsla\n","path":"src/color/hsla.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/color/hsla.js#L33-L55"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  background: hsla(359, 0.75, 0.4, 0.7),\n  background: hsla({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0,7 }),\n  background: hsla(359, 0.75, 0.4, 1),\n}\n\n// styled-components usage\nconst div = styled.div`\n  background: ${hsla(359, 0.75, 0.4, 0.7)};\n  background: ${hsla({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0,7 })};\n  background: ${hsla(359, 0.75, 0.4, 1)};\n`\n\n// CSS in JS Output\n\nelement {\n  background: \"rgba(179,25,28,0.7)\";\n  background: \"rgba(179,25,28,0.7)\";\n  background: \"#b3191c\";\n}"}],"name":"hsla","kind":"function","params":[{"title":"param","name":"value","lineNumber":33,"type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"HslaColor"},{"type":"NameExpression","name":"number"}]}},{"title":"param","name":"saturation","lineNumber":33,"type":{"type":"NameExpression","name":"number"}},{"title":"param","name":"lightness","lineNumber":33,"type":{"type":"NameExpression","name":"number"}},{"title":"param","name":"alpha","lineNumber":33,"type":{"type":"NameExpression","name":"number"}}],"returns":[{"type":{"type":"NameExpression","name":"string"}}],"members":{"instance":[],"static":[]},"path":[{"name":"hsla","kind":"function"}],"namespace":"hsla"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Returns a string value for the darkened color.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":47,"offset":46},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":47,"offset":46},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":47,"offset":46}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  background: darken(0.2, '#FFCD64'),\n  background: darken(0.2, 'rgba(255,205,100,0.7)'),\n}\n\n// styled-components usage\nconst div = styled.div`\n  background: ${darken(0.2, '#FFCD64')};\n  background: ${darken(0.2, 'rgba(255,205,100,0.7)')};\n`\n\n// CSS in JS Output\n\nelement {\n  background: \"#ffbd31\";\n  background: \"rgba(255,189,49,0.7)\";\n}","lineNumber":3}],"loc":{"start":{"line":9,"column":0},"end":{"line":31,"column":3}},"context":{"loc":{"start":{"line":32,"column":0},"end":{"line":42,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/color/darken.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/color/darken.js 00000032","code":"// @flow\n\nimport parseColorString from '../internalHelpers/_parseColorString'\nimport rgbToHsl from '../internalHelpers/_rgbToHsl'\nimport hslToHex from '../internalHelpers/_hslToHex'\nimport hslToRgb from '../internalHelpers/_hslToRgb'\nimport guard from '../internalHelpers/_guard'\n\n/**\n * Returns a string value for the darkened color.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: darken(0.2, '#FFCD64'),\n *   background: darken(0.2, 'rgba(255,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${darken(0.2, '#FFCD64')};\n *   background: ${darken(0.2, 'rgba(255,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#ffbd31\";\n *   background: \"rgba(255,189,49,0.7)\";\n * }\n */\nfunction darken(amount: number, color: string): string {\n  // parse color string to hsl\n  const hslColor = rgbToHsl(parseColorString(color))\n  const value = {\n    ...hslColor,\n    lightness: guard(0, 1, hslColor.lightness - amount),\n  }\n  return value.alpha >= 1 || value.alpha === undefined\n    ? hslToHex(value.hue, value.saturation, value.lightness)\n    : `rgba(${hslToRgb(value.hue, value.saturation, value.lightness)},${value.alpha})`\n}\n\nexport default darken\n","path":"src/color/darken.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/color/darken.js#L32-L42"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  background: darken(0.2, '#FFCD64'),\n  background: darken(0.2, 'rgba(255,205,100,0.7)'),\n}\n\n// styled-components usage\nconst div = styled.div`\n  background: ${darken(0.2, '#FFCD64')};\n  background: ${darken(0.2, 'rgba(255,205,100,0.7)')};\n`\n\n// CSS in JS Output\n\nelement {\n  background: \"#ffbd31\";\n  background: \"rgba(255,189,49,0.7)\";\n}"}],"name":"darken","kind":"function","params":[{"title":"param","name":"amount","lineNumber":32,"type":{"type":"NameExpression","name":"number"}},{"title":"param","name":"color","lineNumber":32,"type":{"type":"NameExpression","name":"string"}}],"returns":[{"type":{"type":"NameExpression","name":"string"}}],"members":{"instance":[],"static":[]},"path":[{"name":"darken","kind":"function"}],"namespace":"darken"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Returns a string value for the lightened color.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":48,"offset":47},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":48,"offset":47},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":48,"offset":47}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  background: lighten(0.2, '#CCCD64'),\n  background: lighten(0.2, 'rgba(204,205,100,0.7)'),\n}\n\n// styled-components usage\nconst div = styled.div`\n  background: ${lighten(0.2, '#FFCD64')};\n  background: ${lighten(0.2, 'rgba(204,205,100,0.7)')};\n`\n\n// CSS in JS Output\n\nelement {\n  background: \"#e5e6b1\";\n  background: \"rgba(229,230,177,0.7)\";\n}","lineNumber":3}],"loc":{"start":{"line":9,"column":0},"end":{"line":31,"column":3}},"context":{"loc":{"start":{"line":32,"column":0},"end":{"line":42,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/color/lighten.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/color/lighten.js 00000032","code":"// @flow\n\nimport parseColorString from '../internalHelpers/_parseColorString'\nimport rgbToHsl from '../internalHelpers/_rgbToHsl'\nimport hslToHex from '../internalHelpers/_hslToHex'\nimport hslToRgb from '../internalHelpers/_hslToRgb'\nimport guard from '../internalHelpers/_guard'\n\n/**\n * Returns a string value for the lightened color.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: lighten(0.2, '#CCCD64'),\n *   background: lighten(0.2, 'rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${lighten(0.2, '#FFCD64')};\n *   background: ${lighten(0.2, 'rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#e5e6b1\";\n *   background: \"rgba(229,230,177,0.7)\";\n * }\n */\nfunction lighten(amount: number, color: string): string {\n  // parse color string to hsl\n  const hslColor = rgbToHsl(parseColorString(color))\n  const value = {\n    ...hslColor,\n    lightness: guard(0, 1, hslColor.lightness + amount),\n  }\n  return value.alpha >= 1 || value.alpha === undefined\n    ? hslToHex(value.hue, value.saturation, value.lightness)\n    : `rgba(${hslToRgb(value.hue, value.saturation, value.lightness)},${value.alpha})`\n}\n\nexport default lighten\n","path":"src/color/lighten.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/color/lighten.js#L32-L42"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  background: lighten(0.2, '#CCCD64'),\n  background: lighten(0.2, 'rgba(204,205,100,0.7)'),\n}\n\n// styled-components usage\nconst div = styled.div`\n  background: ${lighten(0.2, '#FFCD64')};\n  background: ${lighten(0.2, 'rgba(204,205,100,0.7)')};\n`\n\n// CSS in JS Output\n\nelement {\n  background: \"#e5e6b1\";\n  background: \"rgba(229,230,177,0.7)\";\n}"}],"name":"lighten","kind":"function","params":[{"title":"param","name":"amount","lineNumber":32,"type":{"type":"NameExpression","name":"number"}},{"title":"param","name":"color","lineNumber":32,"type":{"type":"NameExpression","name":"string"}}],"returns":[{"type":{"type":"NameExpression","name":"string"}}],"members":{"instance":[],"static":[]},"path":[{"name":"lighten","kind":"function"}],"namespace":"lighten"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Increases the intensity of a color. Its range is between 0 to 1. The first\nargument of the saturate function is the amount by how much the color\nintensity should be increased.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":3,"column":31,"offset":175},"indent":[1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":3,"column":31,"offset":175},"indent":[1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":3,"column":31,"offset":175}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  background: saturate(0.2, '#CCCD64'),\n  background: saturate(0.2, 'rgba(204,205,100,0.7)'),\n}\n\n// styled-components usage\nconst div = styled.div`\n  background: ${saturate(0.2, '#FFCD64')};\n  background: ${saturate(0.2, 'rgba(204,205,100,0.7)')};\n`\n\n// CSS in JS Output\n\nelement {\n  background: \"#e0e250\";\n  background: \"rgba(224,226,80,0.7)\";\n}","lineNumber":5}],"loc":{"start":{"line":9,"column":0},"end":{"line":33,"column":3}},"context":{"loc":{"start":{"line":34,"column":0},"end":{"line":44,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/color/saturate.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/color/saturate.js 00000034","code":"// @flow\n\nimport parseColorString from '../internalHelpers/_parseColorString'\nimport rgbToHsl from '../internalHelpers/_rgbToHsl'\nimport hslToHex from '../internalHelpers/_hslToHex'\nimport hslToRgb from '../internalHelpers/_hslToRgb'\nimport guard from '../internalHelpers/_guard'\n\n/**\n * Increases the intensity of a color. Its range is between 0 to 1. The first\n * argument of the saturate function is the amount by how much the color\n * intensity should be increased.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: saturate(0.2, '#CCCD64'),\n *   background: saturate(0.2, 'rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${saturate(0.2, '#FFCD64')};\n *   background: ${saturate(0.2, 'rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#e0e250\";\n *   background: \"rgba(224,226,80,0.7)\";\n * }\n */\nfunction saturate(amount: number, color: string): string {\n  // parse color string to hsl\n  const hslColor = rgbToHsl(parseColorString(color))\n  const value = {\n    ...hslColor,\n    saturation: guard(0, 1, hslColor.saturation + amount),\n  }\n  return value.alpha >= 1 || value.alpha === undefined\n    ? hslToHex(value.hue, value.saturation, value.lightness)\n    : `rgba(${hslToRgb(value.hue, value.saturation, value.lightness)},${value.alpha})`\n}\n\nexport default saturate\n","path":"src/color/saturate.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/color/saturate.js#L34-L44"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  background: saturate(0.2, '#CCCD64'),\n  background: saturate(0.2, 'rgba(204,205,100,0.7)'),\n}\n\n// styled-components usage\nconst div = styled.div`\n  background: ${saturate(0.2, '#FFCD64')};\n  background: ${saturate(0.2, 'rgba(204,205,100,0.7)')};\n`\n\n// CSS in JS Output\n\nelement {\n  background: \"#e0e250\";\n  background: \"rgba(224,226,80,0.7)\";\n}"}],"name":"saturate","kind":"function","params":[{"title":"param","name":"amount","lineNumber":34,"type":{"type":"NameExpression","name":"number"}},{"title":"param","name":"color","lineNumber":34,"type":{"type":"NameExpression","name":"string"}}],"returns":[{"type":{"type":"NameExpression","name":"string"}}],"members":{"instance":[],"static":[]},"path":[{"name":"saturate","kind":"function"}],"namespace":"saturate"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Decreases the intensity of a color. Its range is between 0 to 1. The first\nargument of the desaturate function is the amount by how much the color\nintensity should be decreased.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":3,"column":31,"offset":177},"indent":[1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":3,"column":31,"offset":177},"indent":[1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":3,"column":31,"offset":177}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  background: desaturate(0.2, '#CCCD64'),\n  background: desaturate(0.2, 'rgba(204,205,100,0.7)'),\n}\n\n// styled-components usage\nconst div = styled.div`\n  background: ${desaturate(0.2, '#CCCD64')};\n  background: ${desaturate(0.2, 'rgba(204,205,100,0.7)')};\n`\n\n// CSS in JS Output\nelement {\n  background: \"#b8b979\";\n  background: \"rgba(184,185,121,0.7)\";\n}","lineNumber":5}],"loc":{"start":{"line":9,"column":0},"end":{"line":32,"column":3}},"context":{"loc":{"start":{"line":33,"column":0},"end":{"line":43,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/color/desaturate.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/color/desaturate.js 00000033","code":"// @flow\n\nimport parseColorString from '../internalHelpers/_parseColorString'\nimport rgbToHsl from '../internalHelpers/_rgbToHsl'\nimport hslToHex from '../internalHelpers/_hslToHex'\nimport hslToRgb from '../internalHelpers/_hslToRgb'\nimport guard from '../internalHelpers/_guard'\n\n/**\n * Decreases the intensity of a color. Its range is between 0 to 1. The first\n * argument of the desaturate function is the amount by how much the color\n * intensity should be decreased.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: desaturate(0.2, '#CCCD64'),\n *   background: desaturate(0.2, 'rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${desaturate(0.2, '#CCCD64')};\n *   background: ${desaturate(0.2, 'rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#b8b979\";\n *   background: \"rgba(184,185,121,0.7)\";\n * }\n */\nfunction desaturate(amount: number, color: string): string {\n  // parse color string to hsl\n  const hslColor = rgbToHsl(parseColorString(color))\n  const value = {\n    ...hslColor,\n    saturation: guard(0, 1, hslColor.saturation - amount),\n  }\n  return value.alpha >= 1 || value.alpha === undefined\n    ? hslToHex(value.hue, value.saturation, value.lightness)\n    : `rgba(${hslToRgb(value.hue, value.saturation, value.lightness)},${value.alpha})`\n}\n\nexport default desaturate\n","path":"src/color/desaturate.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/color/desaturate.js#L33-L43"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  background: desaturate(0.2, '#CCCD64'),\n  background: desaturate(0.2, 'rgba(204,205,100,0.7)'),\n}\n\n// styled-components usage\nconst div = styled.div`\n  background: ${desaturate(0.2, '#CCCD64')};\n  background: ${desaturate(0.2, 'rgba(204,205,100,0.7)')};\n`\n\n// CSS in JS Output\nelement {\n  background: \"#b8b979\";\n  background: \"rgba(184,185,121,0.7)\";\n}"}],"name":"desaturate","kind":"function","params":[{"title":"param","name":"amount","lineNumber":33,"type":{"type":"NameExpression","name":"number"}},{"title":"param","name":"color","lineNumber":33,"type":{"type":"NameExpression","name":"string"}}],"returns":[{"type":{"type":"NameExpression","name":"string"}}],"members":{"instance":[],"static":[]},"path":[{"name":"desaturate","kind":"function"}],"namespace":"desaturate"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Converts the color to a grayscale, but reducing its saturation to 0.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":69,"offset":68},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":69,"offset":68},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":69,"offset":68}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  background: grayscale('#CCCD64'),\n  background: grayscale('rgba(204,205,100,0.7)'),\n}\n\n// styled-components usage\nconst div = styled.div`\n  background: ${grayscale('#CCCD64')};\n  background: ${grayscale('rgba(204,205,100,0.7)')};\n`\n\n// CSS in JS Output\nelement {\n  background: \"#999\";\n  background: \"rgba(153,153,153,0.7)\";\n}","lineNumber":3}],"loc":{"start":{"line":8,"column":0},"end":{"line":29,"column":3}},"context":{"loc":{"start":{"line":30,"column":0},"end":{"line":40,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/color/grayscale.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/color/grayscale.js 00000030","code":"// @flow\n\nimport parseColorString from '../internalHelpers/_parseColorString'\nimport rgbToHsl from '../internalHelpers/_rgbToHsl'\nimport hslToHex from '../internalHelpers/_hslToHex'\nimport hslToRgb from '../internalHelpers/_hslToRgb'\n\n/**\n * Converts the color to a grayscale, but reducing its saturation to 0.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: grayscale('#CCCD64'),\n *   background: grayscale('rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${grayscale('#CCCD64')};\n *   background: ${grayscale('rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#999\";\n *   background: \"rgba(153,153,153,0.7)\";\n * }\n */\nfunction grayscale(color: string): string {\n  // parse color string to hsl\n  const hslColor = rgbToHsl(parseColorString(color))\n  const value = {\n    ...hslColor,\n    saturation: 0,\n  }\n  return value.alpha >= 1 || value.alpha === undefined\n    ? hslToHex(value.hue, value.saturation, value.lightness)\n    : `rgba(${hslToRgb(value.hue, value.saturation, value.lightness)},${value.alpha})`\n}\n\nexport default grayscale\n","path":"src/color/grayscale.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/color/grayscale.js#L30-L40"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  background: grayscale('#CCCD64'),\n  background: grayscale('rgba(204,205,100,0.7)'),\n}\n\n// styled-components usage\nconst div = styled.div`\n  background: ${grayscale('#CCCD64')};\n  background: ${grayscale('rgba(204,205,100,0.7)')};\n`\n\n// CSS in JS Output\nelement {\n  background: \"#999\";\n  background: \"rgba(153,153,153,0.7)\";\n}"}],"name":"grayscale","kind":"function","params":[{"title":"param","name":"color","lineNumber":30,"type":{"type":"NameExpression","name":"string"}}],"returns":[{"type":{"type":"NameExpression","name":"string"}}],"members":{"instance":[],"static":[]},"path":[{"name":"grayscale","kind":"function"}],"namespace":"grayscale"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Changes the hue of the color. Hue is a number between 0 to 360. The first\nargument for adjustHue is the amount of degrees the color is rotated along\nthe color wheel.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":3,"column":17,"offset":165},"indent":[1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":3,"column":17,"offset":165},"indent":[1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":3,"column":17,"offset":165}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  background: adjustHue('#448'),\n  background: adjustHue('rgba(101,100,205,0.7)'),\n}\n\n// styled-components usage\nconst div = styled.div`\n  background: ${adjustHue('#448')};\n  background: ${adjustHue('rgba(101,100,205,0.7)')};\n`\n\n// CSS in JS Output\nelement {\n  background: \"#5b4488\";\n  background: \"rgba(136,100,205,0.7)\";\n}","lineNumber":5}],"loc":{"start":{"line":8,"column":0},"end":{"line":31,"column":3}},"context":{"loc":{"start":{"line":32,"column":0},"end":{"line":42,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/color/adjustHue.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/color/adjustHue.js 00000032","code":"// @flow\n\nimport parseColorString from '../internalHelpers/_parseColorString'\nimport rgbToHsl from '../internalHelpers/_rgbToHsl'\nimport hslToHex from '../internalHelpers/_hslToHex'\nimport hslToRgb from '../internalHelpers/_hslToRgb'\n\n/**\n * Changes the hue of the color. Hue is a number between 0 to 360. The first\n * argument for adjustHue is the amount of degrees the color is rotated along\n * the color wheel.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: adjustHue('#448'),\n *   background: adjustHue('rgba(101,100,205,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${adjustHue('#448')};\n *   background: ${adjustHue('rgba(101,100,205,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#5b4488\";\n *   background: \"rgba(136,100,205,0.7)\";\n * }\n */\nfunction adjustHue(degree: number, color: string): string {\n  // parse color string to hsl\n  const hslColor = rgbToHsl(parseColorString(color))\n  const value = {\n    ...hslColor,\n    hue: (hslColor.hue + degree) % 360,\n  }\n  return value.alpha >= 1 || value.alpha === undefined\n    ? hslToHex(value.hue, value.saturation, value.lightness)\n    : `rgba(${hslToRgb(value.hue, value.saturation, value.lightness)},${value.alpha})`\n}\n\nexport default adjustHue\n","path":"src/color/adjustHue.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/color/adjustHue.js#L32-L42"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  background: adjustHue('#448'),\n  background: adjustHue('rgba(101,100,205,0.7)'),\n}\n\n// styled-components usage\nconst div = styled.div`\n  background: ${adjustHue('#448')};\n  background: ${adjustHue('rgba(101,100,205,0.7)')};\n`\n\n// CSS in JS Output\nelement {\n  background: \"#5b4488\";\n  background: \"rgba(136,100,205,0.7)\";\n}"}],"name":"adjustHue","kind":"function","params":[{"title":"param","name":"degree","lineNumber":32,"type":{"type":"NameExpression","name":"number"}},{"title":"param","name":"color","lineNumber":32,"type":{"type":"NameExpression","name":"string"}}],"returns":[{"type":{"type":"NameExpression","name":"string"}}],"members":{"instance":[],"static":[]},"path":[{"name":"adjustHue","kind":"function"}],"namespace":"adjustHue"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Returns the complement of the provided color. This is identical to adjustHue(180, ","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":83,"offset":82},"indent":[]}},{"type":"html","value":"<color>","position":{"start":{"line":1,"column":83,"offset":82},"end":{"line":1,"column":90,"offset":89},"indent":[]}},{"type":"text","value":").","position":{"start":{"line":1,"column":90,"offset":89},"end":{"line":1,"column":92,"offset":91},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":92,"offset":91},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":92,"offset":91}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  background: complement('#448'),\n  background: complement('rgba(204,205,100,0.7)'),\n}\n\n// styled-components usage\nconst div = styled.div`\n  background: ${complement('#448')};\n  background: ${complement('rgba(204,205,100,0.7)')};\n`\n\n// CSS in JS Output\nelement {\n  background: \"#884\";\n  background: \"rgba(153,153,153,0.7)\";\n}","lineNumber":3}],"loc":{"start":{"line":8,"column":0},"end":{"line":29,"column":3}},"context":{"loc":{"start":{"line":30,"column":0},"end":{"line":40,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/color/complement.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/color/complement.js 00000030","code":"// @flow\n\nimport parseColorString from '../internalHelpers/_parseColorString'\nimport rgbToHsl from '../internalHelpers/_rgbToHsl'\nimport hslToHex from '../internalHelpers/_hslToHex'\nimport hslToRgb from '../internalHelpers/_hslToRgb'\n\n/**\n * Returns the complement of the provided color. This is identical to adjustHue(180, <color>).\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: complement('#448'),\n *   background: complement('rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${complement('#448')};\n *   background: ${complement('rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#884\";\n *   background: \"rgba(153,153,153,0.7)\";\n * }\n */\nfunction complement(color: string): string {\n  // parse color string to hsl\n  const hslColor = rgbToHsl(parseColorString(color))\n  const value = {\n    ...hslColor,\n    hue: (hslColor.hue + 180) % 360,\n  }\n  return value.alpha >= 1 || value.alpha === undefined\n    ? hslToHex(value.hue, value.saturation, value.lightness)\n    : `rgba(${hslToRgb(value.hue, value.saturation, value.lightness)},${value.alpha})`\n}\n\nexport default complement\n","path":"src/color/complement.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/color/complement.js#L30-L40"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  background: complement('#448'),\n  background: complement('rgba(204,205,100,0.7)'),\n}\n\n// styled-components usage\nconst div = styled.div`\n  background: ${complement('#448')};\n  background: ${complement('rgba(204,205,100,0.7)')};\n`\n\n// CSS in JS Output\nelement {\n  background: \"#884\";\n  background: \"rgba(153,153,153,0.7)\";\n}"}],"name":"complement","kind":"function","params":[{"title":"param","name":"color","lineNumber":30,"type":{"type":"NameExpression","name":"string"}}],"returns":[{"type":{"type":"NameExpression","name":"string"}}],"members":{"instance":[],"static":[]},"path":[{"name":"complement","kind":"function"}],"namespace":"complement"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Inverts the red, green and blue values of a color.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":51,"offset":50},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":51,"offset":50},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":51,"offset":50}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  background: invert(0.2, '#CCCD64'),\n  background: invert(0.2, 'rgba(101,100,205,0.7)'),\n}\n\n// styled-components usage\nconst div = styled.div`\n  background: ${invert(0.2, '#CCCD64')};\n  background: ${invert(0.2, 'rgba(101,100,205,0.7)')};\n`\n\n// CSS in JS Output\n\nelement {\n  background: \"#33329b\";\n  background: \"rgba(154,155,50,0.7)\";\n}","lineNumber":3}],"loc":{"start":{"line":7,"column":0},"end":{"line":29,"column":3}},"context":{"loc":{"start":{"line":30,"column":0},"end":{"line":42,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/color/invert.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/color/invert.js 00000030","code":"// @flow\n\nimport parseColorString from '../internalHelpers/_parseColorString'\nimport rgb from './rgb'\nimport rgba from './rgba'\n\n/**\n * Inverts the red, green and blue values of a color.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: invert(0.2, '#CCCD64'),\n *   background: invert(0.2, 'rgba(101,100,205,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${invert(0.2, '#CCCD64')};\n *   background: ${invert(0.2, 'rgba(101,100,205,0.7)')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#33329b\";\n *   background: \"rgba(154,155,50,0.7)\";\n * }\n */\nfunction invert(color: string): string {\n  // parse color string to hsl\n  const value = parseColorString(color)\n  const invertedColor = {\n    ...value,\n    red: 255 - value.red,\n    green: 255 - value.green,\n    blue: 255 - value.blue,\n  }\n  return invertedColor.alpha === undefined || invertedColor.alpha >= 1\n    ? rgb(invertedColor)\n    : rgba(invertedColor)\n}\n\nexport default invert\n","path":"src/color/invert.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/color/invert.js#L30-L42"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  background: invert(0.2, '#CCCD64'),\n  background: invert(0.2, 'rgba(101,100,205,0.7)'),\n}\n\n// styled-components usage\nconst div = styled.div`\n  background: ${invert(0.2, '#CCCD64')};\n  background: ${invert(0.2, 'rgba(101,100,205,0.7)')};\n`\n\n// CSS in JS Output\n\nelement {\n  background: \"#33329b\";\n  background: \"rgba(154,155,50,0.7)\";\n}"}],"name":"invert","kind":"function","params":[{"title":"param","name":"color","lineNumber":30,"type":{"type":"NameExpression","name":"string"}}],"returns":[{"type":{"type":"NameExpression","name":"string"}}],"members":{"instance":[],"static":[]},"path":[{"name":"invert","kind":"function"}],"namespace":"invert"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Increases the opacity of a color. Its range for the amount is between 0 to 1.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":78,"offset":77},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":78,"offset":77},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":78,"offset":77}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  background: opacify(0.1, '#fff');\n  background: opacify(0.2, 'hsl(0, 0%, 100%)'),\n  background: opacify(0.5, 'rgba(255, 0, 0, 0.8)'),\n}\n\n// styled-components usage\nconst div = styled.div`\n  background: ${opacify(0.1, '#fff')};\n  background: ${opacify(0.2, 'hsl(0, 0%, 100%)')},\n  background: ${opacify(0.5, 'rgba(255, 0, 0, 0.8)')},\n`\n\n// CSS in JS Output\n\nelement {\n  background: \"rgba(255,255,255,0.9)\";\n  background: \"rgba(255,255,255,0.8)\";\n  background: \"rgba(255,0,0,0.3)\";\n}","lineNumber":4}],"loc":{"start":{"line":6,"column":0},"end":{"line":32,"column":3}},"context":{"loc":{"start":{"line":33,"column":0},"end":{"line":41,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/color/opacify.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/color/opacify.js 00000033","code":"// @flow\nimport rgba from './rgba'\nimport parseColorString from '../internalHelpers/_parseColorString'\nimport guard from '../internalHelpers/_guard'\n\n/**\n * Increases the opacity of a color. Its range for the amount is between 0 to 1.\n *\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: opacify(0.1, '#fff');\n *   background: opacify(0.2, 'hsl(0, 0%, 100%)'),\n *   background: opacify(0.5, 'rgba(255, 0, 0, 0.8)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${opacify(0.1, '#fff')};\n *   background: ${opacify(0.2, 'hsl(0, 0%, 100%)')},\n *   background: ${opacify(0.5, 'rgba(255, 0, 0, 0.8)')},\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"rgba(255,255,255,0.9)\";\n *   background: \"rgba(255,255,255,0.8)\";\n *   background: \"rgba(255,0,0,0.3)\";\n * }\n */\nfunction opacify(amount: number, color: string) {\n  const parsedColor = parseColorString(color)\n  const alpha: number = typeof parsedColor.alpha === 'number' ? parsedColor.alpha : 1\n  const colorWithAlpha = {\n    ...parsedColor,\n    alpha: guard(0, 1, (alpha + amount)),\n  }\n  return rgba(colorWithAlpha)\n}\n\nexport default opacify\n","path":"src/color/opacify.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/color/opacify.js#L33-L41"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  background: opacify(0.1, '#fff');\n  background: opacify(0.2, 'hsl(0, 0%, 100%)'),\n  background: opacify(0.5, 'rgba(255, 0, 0, 0.8)'),\n}\n\n// styled-components usage\nconst div = styled.div`\n  background: ${opacify(0.1, '#fff')};\n  background: ${opacify(0.2, 'hsl(0, 0%, 100%)')},\n  background: ${opacify(0.5, 'rgba(255, 0, 0, 0.8)')},\n`\n\n// CSS in JS Output\n\nelement {\n  background: \"rgba(255,255,255,0.9)\";\n  background: \"rgba(255,255,255,0.8)\";\n  background: \"rgba(255,0,0,0.3)\";\n}"}],"name":"opacify","kind":"function","params":[{"title":"param","name":"amount","lineNumber":33,"type":{"type":"NameExpression","name":"number"}},{"title":"param","name":"color","lineNumber":33,"type":{"type":"NameExpression","name":"string"}}],"members":{"instance":[],"static":[]},"path":[{"name":"opacify","kind":"function"}],"namespace":"opacify"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Decreases the opacity of a color. Its range for the amount is between 0 to 1.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":78,"offset":77},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":78,"offset":77},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":78,"offset":77}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  background: transparentize(0.1, '#fff');\n  background: transparentize(0.2, 'hsl(0, 0%, 100%)'),\n  background: transparentize(0.5, 'rgba(255, 0, 0, 0.8)'),\n}\n\n// styled-components usage\nconst div = styled.div`\n  background: ${transparentize(0.1, '#fff')};\n  background: ${transparentize(0.2, 'hsl(0, 0%, 100%)')},\n  background: ${transparentize(0.5, 'rgba(255, 0, 0, 0.8)')},\n`\n\n// CSS in JS Output\n\nelement {\n  background: \"rgba(255,255,255,0.9)\";\n  background: \"rgba(255,255,255,0.8)\";\n  background: \"rgba(255,0,0,0.3)\";\n}","lineNumber":4}],"loc":{"start":{"line":6,"column":0},"end":{"line":32,"column":3}},"context":{"loc":{"start":{"line":33,"column":0},"end":{"line":41,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/color/transparentize.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/color/transparentize.js 00000033","code":"// @flow\nimport rgba from './rgba'\nimport parseColorString from '../internalHelpers/_parseColorString'\nimport guard from '../internalHelpers/_guard'\n\n/**\n * Decreases the opacity of a color. Its range for the amount is between 0 to 1.\n *\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: transparentize(0.1, '#fff');\n *   background: transparentize(0.2, 'hsl(0, 0%, 100%)'),\n *   background: transparentize(0.5, 'rgba(255, 0, 0, 0.8)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${transparentize(0.1, '#fff')};\n *   background: ${transparentize(0.2, 'hsl(0, 0%, 100%)')},\n *   background: ${transparentize(0.5, 'rgba(255, 0, 0, 0.8)')},\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"rgba(255,255,255,0.9)\";\n *   background: \"rgba(255,255,255,0.8)\";\n *   background: \"rgba(255,0,0,0.3)\";\n * }\n */\nfunction transparentize(amount: number, color: string) {\n  const parsedColor = parseColorString(color)\n  const alpha: number = typeof parsedColor.alpha === 'number' ? parsedColor.alpha : 1\n  const colorWithAlpha = {\n    ...parsedColor,\n    alpha: guard(0, 1, (alpha - amount)),\n  }\n  return rgba(colorWithAlpha)\n}\n\nexport default transparentize\n","path":"src/color/transparentize.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/color/transparentize.js#L33-L41"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  background: transparentize(0.1, '#fff');\n  background: transparentize(0.2, 'hsl(0, 0%, 100%)'),\n  background: transparentize(0.5, 'rgba(255, 0, 0, 0.8)'),\n}\n\n// styled-components usage\nconst div = styled.div`\n  background: ${transparentize(0.1, '#fff')};\n  background: ${transparentize(0.2, 'hsl(0, 0%, 100%)')},\n  background: ${transparentize(0.5, 'rgba(255, 0, 0, 0.8)')},\n`\n\n// CSS in JS Output\n\nelement {\n  background: \"rgba(255,255,255,0.9)\";\n  background: \"rgba(255,255,255,0.8)\";\n  background: \"rgba(255,0,0,0.3)\";\n}"}],"name":"transparentize","kind":"function","params":[{"title":"param","name":"amount","lineNumber":33,"type":{"type":"NameExpression","name":"number"}},{"title":"param","name":"color","lineNumber":33,"type":{"type":"NameExpression","name":"string"}}],"members":{"instance":[],"static":[]},"path":[{"name":"transparentize","kind":"function"}],"namespace":"transparentize"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Mixes two colors together by calculating the average of each of the RGB components.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":84,"offset":83},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":84,"offset":83},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"By default the weight is 0.5 meaning that half of the first color and half the second\ncolor should be used. Optionally the weight can be modified by by providing a number\nas the first argument. 0.25 means that a quarter of the first color and three quarters\nof the second color should be used.","position":{"start":{"line":3,"column":1,"offset":85},"end":{"line":6,"column":36,"offset":378},"indent":[1,1,1]}}],"position":{"start":{"line":3,"column":1,"offset":85},"end":{"line":6,"column":36,"offset":378},"indent":[1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":6,"column":36,"offset":378}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  background: mix('#f00', '#00f')\n  background: mix(0.25, '#f00', '#00f')\n  background: mix('rgba(255, 0, 0, 0.5)', '#00f')\n}\n\n// styled-components usage\nconst div = styled.div`\n  background: ${mix('#f00', '#00f')};\n  background: ${mix(0.25, '#f00', '#00f')};\n  background: ${mix('rgba(255, 0, 0, 0.5)', '#00f')};\n`\n\n// CSS in JS Output\n\nelement {\n  background: \"#7f007f\";\n  background: \"#3f00bf\";\n  background: \"rgba(63, 0, 191, 0.75)\";\n}","lineNumber":8}],"loc":{"start":{"line":6,"column":0},"end":{"line":36,"column":3}},"context":{"loc":{"start":{"line":39,"column":0},"end":{"line":84,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/color/mix.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/color/mix.js 00000039","code":"// @flow\n\nimport rgba from './rgba'\nimport parseColorString from '../internalHelpers/_parseColorString'\n\n/**\n * Mixes two colors together by calculating the average of each of the RGB components.\n *\n * By default the weight is 0.5 meaning that half of the first color and half the second\n * color should be used. Optionally the weight can be modified by by providing a number\n * as the first argument. 0.25 means that a quarter of the first color and three quarters\n * of the second color should be used.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: mix('#f00', '#00f')\n *   background: mix(0.25, '#f00', '#00f')\n *   background: mix('rgba(255, 0, 0, 0.5)', '#00f')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${mix('#f00', '#00f')};\n *   background: ${mix(0.25, '#f00', '#00f')};\n *   background: ${mix('rgba(255, 0, 0, 0.5)', '#00f')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#7f007f\";\n *   background: \"#3f00bf\";\n *   background: \"rgba(63, 0, 191, 0.75)\";\n * }\n */\n// Correct type definition, but doesn't show up when we generate the docs.\n// const mix: ((color: string, color2: string) => string) & (weight: number, color: string, color2: string) => string = (colorOrWeight, color, otherColor) => {\nfunction mix(colorOrWeight: number | string, color: string, otherColor?: string): string {\n  let weight\n  let colorString1\n  let colorString2\n  if (typeof colorOrWeight === 'number' && typeof otherColor === 'string') {\n    weight = colorOrWeight\n    colorString1 = color\n    colorString2 = otherColor\n  } else if (typeof colorOrWeight === 'string') {\n    weight = 0.5\n    colorString1 = colorOrWeight\n    colorString2 = color\n  } else {\n    throw new Error('Passed invalid arguments to mix, please pass either two colors or the weight as a number and the two colors.')\n  }\n\n  const parsedColor1 = parseColorString(colorString1)\n  const color1 = {\n    ...parsedColor1,\n    alpha: typeof parsedColor1.alpha === 'number' ? parsedColor1.alpha : 1,\n  }\n\n  const parsedColor2 = parseColorString(colorString2)\n  const color2 = {\n    ...parsedColor2,\n    alpha: typeof parsedColor2.alpha === 'number' ? parsedColor2.alpha : 1,\n  }\n\n  // The formular is copied from the original Sass implementation:\n  // http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method\n  const alphaDelta = color1.alpha - color2.alpha\n  const x = (weight * 2) - 1\n  const y = x * alphaDelta === -1 ? x : (x + alphaDelta)\n  const z = (1 + (x * alphaDelta))\n  const weight1 = ((y / z) + 1) / 2.0\n  const weight2 = 1 - weight1\n\n  const mixedColor = {\n    red: Math.floor((color1.red * weight1) + (color2.red * weight2)),\n    green: Math.floor((color1.green * weight1) + (color2.green * weight2)),\n    blue: Math.floor((color1.blue * weight1) + (color2.blue * weight2)),\n    alpha: color1.alpha + ((color2.alpha - color1.alpha) * (weight / 1.0)),\n  }\n\n  return rgba(mixedColor)\n}\n\nexport default mix\n","path":"src/color/mix.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/color/mix.js#L39-L84"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  background: mix('#f00', '#00f')\n  background: mix(0.25, '#f00', '#00f')\n  background: mix('rgba(255, 0, 0, 0.5)', '#00f')\n}\n\n// styled-components usage\nconst div = styled.div`\n  background: ${mix('#f00', '#00f')};\n  background: ${mix(0.25, '#f00', '#00f')};\n  background: ${mix('rgba(255, 0, 0, 0.5)', '#00f')};\n`\n\n// CSS in JS Output\n\nelement {\n  background: \"#7f007f\";\n  background: \"#3f00bf\";\n  background: \"rgba(63, 0, 191, 0.75)\";\n}"}],"name":"mix","kind":"function","params":[{"title":"param","name":"colorOrWeight","lineNumber":39,"type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"number"},{"type":"NameExpression","name":"string"}]}},{"title":"param","name":"color","lineNumber":39,"type":{"type":"NameExpression","name":"string"}},{"title":"param","name":"otherColor","lineNumber":39,"type":{"type":"NameExpression","name":"string"}}],"returns":[{"type":{"type":"NameExpression","name":"string"}}],"members":{"instance":[],"static":[]},"path":[{"name":"mix","kind":"function"}],"namespace":"mix"},{"name":"Shorthands","kind":"note","members":{"instance":[],"static":[]},"path":[{"name":"Shorthands","kind":"note"}],"namespace":"Shorthands"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Shorthand for easily setting the animation property. Allows either multiple arrays with animations\nor a single animation spread over the arguments.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2,"column":49,"offset":147},"indent":[1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2,"column":49,"offset":147},"indent":[1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2,"column":49,"offset":147}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  ...animation(['rotate', '1s', 'ease-in-out'], ['colorchange', '2s'])\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${animation(['rotate', '1s', 'ease-in-out'], ['colorchange', '2s'])}\n`\n\n// CSS as JS Output\n\ndiv {\n  'animation': 'rotate 1s ease-in-out, colorchange 2s'\n}","lineNumber":3},{"title":"example","description":"// Styles as object usage\nconst styles = {\n  ...animation('rotate', '1s', 'ease-in-out')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${animation('rotate', '1s', 'ease-in-out')}\n`\n\n// CSS as JS Output\n\ndiv {\n  'animation': 'rotate 1s ease-in-out'\n}","lineNumber":19}],"loc":{"start":{"line":6,"column":0},"end":{"line":41,"column":3}},"context":{"loc":{"start":{"line":42,"column":0},"end":{"line":62,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/animation.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/animation.js 00000042","code":"// @flow\n\n/** */\ntype AnimationProperty = string|number\n\n/**\n * Shorthand for easily setting the animation property. Allows either multiple arrays with animations\n * or a single animation spread over the arguments.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...animation(['rotate', '1s', 'ease-in-out'], ['colorchange', '2s'])\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${animation(['rotate', '1s', 'ease-in-out'], ['colorchange', '2s'])}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'animation': 'rotate 1s ease-in-out, colorchange 2s'\n * }\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...animation('rotate', '1s', 'ease-in-out')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${animation('rotate', '1s', 'ease-in-out')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'animation': 'rotate 1s ease-in-out'\n * }\n */\nfunction animation(...args: Array<Array<AnimationProperty>|AnimationProperty>) {\n  // Allow single or multiple animations passed\n  const multiMode = Array.isArray(args[0])\n  if (!multiMode && args.length > 8) {\n    throw new Error('The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation')\n  }\n  const code = args.map(arg => {\n    if ((multiMode && !Array.isArray(arg)) || (!multiMode && Array.isArray(arg))) {\n      throw new Error('To pass multiple animations please supply them in arrays, e.g. animation([\\'rotate\\', \\'2s\\'], [\\'move\\', \\'1s\\'])\\nTo pass a single animation please supply them in simple values, e.g. animation(\\'rotate\\', \\'2s\\')')\n    }\n    if (Array.isArray(arg) && arg.length > 8) {\n      throw new Error('The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation')\n    }\n\n    return Array.isArray(arg) ? arg.join(' ') : arg\n  }).join(', ')\n\n  return {\n    'animation': code,\n  }\n}\n\nexport default animation\n","path":"src/shorthands/animation.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/shorthands/animation.js#L42-L62"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  ...animation(['rotate', '1s', 'ease-in-out'], ['colorchange', '2s'])\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${animation(['rotate', '1s', 'ease-in-out'], ['colorchange', '2s'])}\n`\n\n// CSS as JS Output\n\ndiv {\n  'animation': 'rotate 1s ease-in-out, colorchange 2s'\n}"},{"description":"// Styles as object usage\nconst styles = {\n  ...animation('rotate', '1s', 'ease-in-out')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${animation('rotate', '1s', 'ease-in-out')}\n`\n\n// CSS as JS Output\n\ndiv {\n  'animation': 'rotate 1s ease-in-out'\n}"}],"name":"animation","kind":"function","params":[{"title":"param","name":"args","lineNumber":42,"type":{"type":"RestType","expression":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"UnionType","elements":[{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"AnimationProperty"}]},{"type":"NameExpression","name":"AnimationProperty"}]}]}}}],"members":{"instance":[],"static":[]},"path":[{"name":"animation","kind":"function"}],"namespace":"animation"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"The backgroundImages shorthand accepts any number of backgroundImage values as parameters for creating a single background statement..","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":135,"offset":134},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":135,"offset":134},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":135,"offset":134}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  ...backgroundImages('url(\"/image/background.jpg\")', 'linear-gradient(red, green)')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${...backgroundImages('url(\"/image/background.jpg\")', 'linear-gradient(red, green)')}\n`\n\n// CSS as JS Output\n\ndiv {\n  'background-image': 'url(\"/image/background.jpg\"), linear-gradient(red, green)'\n}","lineNumber":2}],"loc":{"start":{"line":3,"column":0},"end":{"line":21,"column":3}},"context":{"loc":{"start":{"line":23,"column":0},"end":{"line":27,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/backgroundImages.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/backgroundImages.js 00000023","code":"// @flow\n\n/**\n * The backgroundImages shorthand accepts any number of backgroundImage values as parameters for creating a single background statement..\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...backgroundImages('url(\"/image/background.jpg\")', 'linear-gradient(red, green)')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${...backgroundImages('url(\"/image/background.jpg\")', 'linear-gradient(red, green)')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'background-image': 'url(\"/image/background.jpg\"), linear-gradient(red, green)'\n * }\n */\n\nfunction backgroundImages(...properties: Array<string>) {\n  return {\n    'background-image': properties.join(', '),\n  }\n}\n\nexport default backgroundImages\n","path":"src/shorthands/backgroundImages.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/shorthands/backgroundImages.js#L23-L27"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  ...backgroundImages('url(\"/image/background.jpg\")', 'linear-gradient(red, green)')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${...backgroundImages('url(\"/image/background.jpg\")', 'linear-gradient(red, green)')}\n`\n\n// CSS as JS Output\n\ndiv {\n  'background-image': 'url(\"/image/background.jpg\"), linear-gradient(red, green)'\n}"}],"name":"backgroundImages","kind":"function","params":[{"title":"param","name":"properties","lineNumber":23,"type":{"type":"RestType","expression":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"string"}]}}}],"members":{"instance":[],"static":[]},"path":[{"name":"backgroundImages","kind":"function"}],"namespace":"backgroundImages"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"The backgrounds shorthand accepts any number of background values as parameters for creating a single background statement..","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":125,"offset":124},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":125,"offset":124},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":125,"offset":124}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  ...backgrounds('url(\"/image/background.jpg\")', 'linear-gradient(red, green)', 'center no-repeat')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${...backgrounds('url(\"/image/background.jpg\")', 'linear-gradient(red, green)', 'center no-repeat')}\n`\n\n// CSS as JS Output\n\ndiv {\n  'background': 'url(\"/image/background.jpg\"), linear-gradient(red, green), center no-repeat'\n}","lineNumber":2}],"loc":{"start":{"line":3,"column":0},"end":{"line":21,"column":3}},"context":{"loc":{"start":{"line":22,"column":0},"end":{"line":26,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/backgrounds.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/backgrounds.js 00000022","code":"// @flow\n\n/**\n * The backgrounds shorthand accepts any number of background values as parameters for creating a single background statement..\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...backgrounds('url(\"/image/background.jpg\")', 'linear-gradient(red, green)', 'center no-repeat')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${...backgrounds('url(\"/image/background.jpg\")', 'linear-gradient(red, green)', 'center no-repeat')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'background': 'url(\"/image/background.jpg\"), linear-gradient(red, green), center no-repeat'\n * }\n */\nfunction backgrounds(...properties: Array<string>) {\n  return {\n    'background': properties.join(', '),\n  }\n}\n\nexport default backgrounds\n","path":"src/shorthands/backgrounds.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/shorthands/backgrounds.js#L22-L26"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  ...backgrounds('url(\"/image/background.jpg\")', 'linear-gradient(red, green)', 'center no-repeat')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${...backgrounds('url(\"/image/background.jpg\")', 'linear-gradient(red, green)', 'center no-repeat')}\n`\n\n// CSS as JS Output\n\ndiv {\n  'background': 'url(\"/image/background.jpg\"), linear-gradient(red, green), center no-repeat'\n}"}],"name":"backgrounds","kind":"function","params":[{"title":"param","name":"properties","lineNumber":22,"type":{"type":"RestType","expression":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"string"}]}}}],"members":{"instance":[],"static":[]},"path":[{"name":"backgrounds","kind":"function"}],"namespace":"backgrounds"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"The border-color shorthand accepts up to four values, including null to skip a value, and uses the directional-property mixin to map them to their respective directions.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":170,"offset":169},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":170,"offset":169},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":170,"offset":169}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  ...borderColor('red', 'green', 'blue', 'yellow')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${borderColor('red', 'green', 'blue', 'yellow')}\n`\n\n// CSS as JS Output\n\ndiv {\n  'border-top-color': 'red',\n  'border-right-color': 'green',\n  'border-bottom-color': 'blue',\n  'border-left-color': 'yellow'\n}","lineNumber":2}],"loc":{"start":{"line":4,"column":0},"end":{"line":25,"column":3}},"context":{"loc":{"start":{"line":27,"column":0},"end":{"line":29,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/borderColor.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/borderColor.js 00000027","code":"// @flow\nimport directionalProperty from '../helpers/directionalProperty'\n\n/**\n * The border-color shorthand accepts up to four values, including null to skip a value, and uses the directional-property mixin to map them to their respective directions.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...borderColor('red', 'green', 'blue', 'yellow')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${borderColor('red', 'green', 'blue', 'yellow')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'border-top-color': 'red',\n *   'border-right-color': 'green',\n *   'border-bottom-color': 'blue',\n *   'border-left-color': 'yellow'\n * }\n */\n\nfunction borderColor(...values: Array<?string>) {\n  return directionalProperty('border-color', ...values)\n}\n\nexport default borderColor\n","path":"src/shorthands/borderColor.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/shorthands/borderColor.js#L27-L29"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  ...borderColor('red', 'green', 'blue', 'yellow')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${borderColor('red', 'green', 'blue', 'yellow')}\n`\n\n// CSS as JS Output\n\ndiv {\n  'border-top-color': 'red',\n  'border-right-color': 'green',\n  'border-bottom-color': 'blue',\n  'border-left-color': 'yellow'\n}"}],"name":"borderColor","kind":"function","params":[{"title":"param","name":"values","lineNumber":27,"type":{"type":"RestType","expression":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NullableType","expression":{"type":"NameExpression","name":"string"}}]}}}],"members":{"instance":[],"static":[]},"path":[{"name":"borderColor","kind":"function"}],"namespace":"borderColor"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"The border-radius shorthand accepts a value for side and a value for radius and applies the radius value to both corners of the side.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":134,"offset":133},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":134,"offset":133},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":134,"offset":133}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  ...borderRadius('top', '5px')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${borderRadius('top', '5px')}\n`\n\n// CSS as JS Output\n\ndiv {\n  'border-top-right-radius': '5px',\n  'border-top-left-radius': '5px',\n}","lineNumber":2}],"loc":{"start":{"line":3,"column":0},"end":{"line":22,"column":3}},"context":{"loc":{"start":{"line":24,"column":0},"end":{"line":41,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/borderRadius.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/borderRadius.js 00000024","code":"// @flow\n\n/**\n * The border-radius shorthand accepts a value for side and a value for radius and applies the radius value to both corners of the side.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...borderRadius('top', '5px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${borderRadius('top', '5px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'border-top-right-radius': '5px',\n *   'border-top-left-radius': '5px',\n * }\n */\n\nfunction borderRadius(side:string, radius:string) {\n  if (!radius || typeof radius !== 'string') throw new Error('borderRadius expects a radius value as a string as the second argument.')\n  if (side === 'top' || side === 'bottom') {\n    return {\n      [`border-${side}-right-radius`]: radius,\n      [`border-${side}-left-radius`]: radius,\n    }\n  }\n\n  if (side === 'left' || side === 'right') {\n    return {\n      [`border-top-${side}-radius`]: radius,\n      [`border-bottom-${side}-radius`]: radius,\n    }\n  }\n\n  throw new Error('borderRadius expects one of \"top\", \"bottom\", \"left\" or \"right\" as the first argument.')\n}\n\nexport default borderRadius\n","path":"src/shorthands/borderRadius.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/shorthands/borderRadius.js#L24-L41"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  ...borderRadius('top', '5px')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${borderRadius('top', '5px')}\n`\n\n// CSS as JS Output\n\ndiv {\n  'border-top-right-radius': '5px',\n  'border-top-left-radius': '5px',\n}"}],"name":"borderRadius","kind":"function","params":[{"title":"param","name":"side","lineNumber":24,"type":{"type":"NameExpression","name":"string"}},{"title":"param","name":"radius","lineNumber":24,"type":{"type":"NameExpression","name":"string"}}],"members":{"instance":[],"static":[]},"path":[{"name":"borderRadius","kind":"function"}],"namespace":"borderRadius"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"The border-style shorthand accepts up to four values, including null to skip a value, and uses the directional-property mixin to map them to their respective directions.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":170,"offset":169},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":170,"offset":169},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":170,"offset":169}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  ...borderStyle('solid', 'dashed', 'dotted', 'double')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${borderStyle('solid', 'dashed', 'dotted', 'double')}\n`\n\n// CSS as JS Output\n\ndiv {\n  'border-top-style': 'solid',\n  'border-right-style': 'dashed',\n  'border-bottom-style': 'dotted',\n  'border-left-style': 'double'\n}","lineNumber":2}],"loc":{"start":{"line":4,"column":0},"end":{"line":25,"column":3}},"context":{"loc":{"start":{"line":27,"column":0},"end":{"line":29,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/borderStyle.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/borderStyle.js 00000027","code":"// @flow\nimport directionalProperty from '../helpers/directionalProperty'\n\n/**\n * The border-style shorthand accepts up to four values, including null to skip a value, and uses the directional-property mixin to map them to their respective directions.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...borderStyle('solid', 'dashed', 'dotted', 'double')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${borderStyle('solid', 'dashed', 'dotted', 'double')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'border-top-style': 'solid',\n *   'border-right-style': 'dashed',\n *   'border-bottom-style': 'dotted',\n *   'border-left-style': 'double'\n * }\n */\n\nfunction borderStyle(...values: Array<?string>) {\n  return directionalProperty('border-style', ...values)\n}\n\nexport default borderStyle\n","path":"src/shorthands/borderStyle.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/shorthands/borderStyle.js#L27-L29"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  ...borderStyle('solid', 'dashed', 'dotted', 'double')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${borderStyle('solid', 'dashed', 'dotted', 'double')}\n`\n\n// CSS as JS Output\n\ndiv {\n  'border-top-style': 'solid',\n  'border-right-style': 'dashed',\n  'border-bottom-style': 'dotted',\n  'border-left-style': 'double'\n}"}],"name":"borderStyle","kind":"function","params":[{"title":"param","name":"values","lineNumber":27,"type":{"type":"RestType","expression":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NullableType","expression":{"type":"NameExpression","name":"string"}}]}}}],"members":{"instance":[],"static":[]},"path":[{"name":"borderStyle","kind":"function"}],"namespace":"borderStyle"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"The border-width shorthand accepts up to four values, including null to skip a value, and uses the directional-property mixin to map them to their respective directions.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":170,"offset":169},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":170,"offset":169},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":170,"offset":169}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  ...borderWidth('12px', '24px', '36px', '48px')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${borderWidth('12px', '24px', '36px', '48px')}\n`\n\n// CSS as JS Output\n\ndiv {\n  'border-top-width': '12px',\n  'border-right-width': '24px',\n  'border-bottom-width': '36px',\n  'border-left-width': '48px'\n}","lineNumber":2}],"loc":{"start":{"line":4,"column":0},"end":{"line":25,"column":3}},"context":{"loc":{"start":{"line":27,"column":0},"end":{"line":29,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/borderWidth.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/borderWidth.js 00000027","code":"// @flow\nimport directionalProperty from '../helpers/directionalProperty'\n\n/**\n * The border-width shorthand accepts up to four values, including null to skip a value, and uses the directional-property mixin to map them to their respective directions.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...borderWidth('12px', '24px', '36px', '48px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${borderWidth('12px', '24px', '36px', '48px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'border-top-width': '12px',\n *   'border-right-width': '24px',\n *   'border-bottom-width': '36px',\n *   'border-left-width': '48px'\n * }\n */\n\nfunction borderWidth(...values: Array<?string>) {\n  return directionalProperty('border-width', ...values)\n}\n\nexport default borderWidth\n","path":"src/shorthands/borderWidth.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/shorthands/borderWidth.js#L27-L29"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  ...borderWidth('12px', '24px', '36px', '48px')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${borderWidth('12px', '24px', '36px', '48px')}\n`\n\n// CSS as JS Output\n\ndiv {\n  'border-top-width': '12px',\n  'border-right-width': '24px',\n  'border-bottom-width': '36px',\n  'border-left-width': '48px'\n}"}],"name":"borderWidth","kind":"function","params":[{"title":"param","name":"values","lineNumber":27,"type":{"type":"RestType","expression":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NullableType","expression":{"type":"NameExpression","name":"string"}}]}}}],"members":{"instance":[],"static":[]},"path":[{"name":"borderWidth","kind":"function"}],"namespace":"borderWidth"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Populates selectors that target all buttons. You can pass optional states to append to the selectors.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":102,"offset":101},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":102,"offset":101},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":102,"offset":101}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  [buttons('active')]: {\n    'border': 'none'\n  }\n}\n\n// styled-components usage\nconst div = styled.div`\n  > ${buttons('active')} {\n    border: none;\n  }\n`\n\n// CSS in JS Output\n\n 'button:active,\n 'input[type=\"button\"]:active,\n 'input[type=\\\"reset\\\"]:active,\n 'input[type=\\\"submit\\\"]:active: {\n  'border': 'none'\n}","lineNumber":2}],"loc":{"start":{"line":21,"column":0},"end":{"line":46,"column":3}},"context":{"loc":{"start":{"line":48,"column":0},"end":{"line":50,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/buttons.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/buttons.js 00000048","code":"// @flow\nimport statefulSelectors from '../internalHelpers/_statefulSelectors'\n\nconst stateMap = [undefined, null, 'active', 'focus', 'hover']\n\nfunction template(state) {\n  return `button${state},\n  input[type=\"button\"]${state},\n  input[type=\"reset\"]${state},\n  input[type=\"submit\"]${state}`\n}\n\n/** */\ntype ButtonState =\n  | typeof(undefined)\n  | null\n  | 'active'\n  | 'focus'\n  | 'hover';\n\n/**\n * Populates selectors that target all buttons. You can pass optional states to append to the selectors.\n * @example\n * // Styles as object usage\n * const styles = {\n *   [buttons('active')]: {\n *     'border': 'none'\n *   }\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   > ${buttons('active')} {\n *     border: none;\n *   }\n * `\n *\n * // CSS in JS Output\n *\n *  'button:active,\n *  'input[type=\"button\"]:active,\n *  'input[type=\\\"reset\\\"]:active,\n *  'input[type=\\\"submit\\\"]:active: {\n *   'border': 'none'\n * }\n */\n\nfunction buttons(...states: Array<ButtonState>) {\n  return statefulSelectors(states, template, stateMap)\n}\n\nexport default buttons\n","path":"src/shorthands/buttons.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/shorthands/buttons.js#L48-L50"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  [buttons('active')]: {\n    'border': 'none'\n  }\n}\n\n// styled-components usage\nconst div = styled.div`\n  > ${buttons('active')} {\n    border: none;\n  }\n`\n\n// CSS in JS Output\n\n 'button:active,\n 'input[type=\"button\"]:active,\n 'input[type=\\\"reset\\\"]:active,\n 'input[type=\\\"submit\\\"]:active: {\n  'border': 'none'\n}"}],"name":"buttons","kind":"function","params":[{"title":"param","name":"states","lineNumber":48,"type":{"type":"RestType","expression":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"ButtonState"}]}}}],"members":{"instance":[],"static":[]},"path":[{"name":"buttons","kind":"function"}],"namespace":"buttons"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"The margin shorthand accepts up to four values, including null to skip a value, and uses the directional-property mixin to map them to their respective directions.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":164,"offset":163},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":164,"offset":163},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":164,"offset":163}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  ...margin('12px', '24px', '36px', '48px')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${margin('12px', '24px', '36px', '48px')}\n`\n\n// CSS as JS Output\n\ndiv {\n  'margin-top': '12px',\n  'margin-right': '24px',\n  'margin-bottom': '36px',\n  'margin-left': '48px'\n}","lineNumber":2}],"loc":{"start":{"line":4,"column":0},"end":{"line":25,"column":3}},"context":{"loc":{"start":{"line":27,"column":0},"end":{"line":29,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/margin.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/margin.js 00000027","code":"// @flow\nimport directionalProperty from '../helpers/directionalProperty'\n\n/**\n * The margin shorthand accepts up to four values, including null to skip a value, and uses the directional-property mixin to map them to their respective directions.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...margin('12px', '24px', '36px', '48px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${margin('12px', '24px', '36px', '48px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'margin-top': '12px',\n *   'margin-right': '24px',\n *   'margin-bottom': '36px',\n *   'margin-left': '48px'\n * }\n */\n\nfunction margin(...values: Array<?string>) {\n  return directionalProperty('margin', ...values)\n}\n\nexport default margin\n","path":"src/shorthands/margin.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/shorthands/margin.js#L27-L29"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  ...margin('12px', '24px', '36px', '48px')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${margin('12px', '24px', '36px', '48px')}\n`\n\n// CSS as JS Output\n\ndiv {\n  'margin-top': '12px',\n  'margin-right': '24px',\n  'margin-bottom': '36px',\n  'margin-left': '48px'\n}"}],"name":"margin","kind":"function","params":[{"title":"param","name":"values","lineNumber":27,"type":{"type":"RestType","expression":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NullableType","expression":{"type":"NameExpression","name":"string"}}]}}}],"members":{"instance":[],"static":[]},"path":[{"name":"margin","kind":"function"}],"namespace":"margin"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"The padding shorthand accepts up to four values, including null to skip a value, and uses the directional-property mixin to map them to their respective directions.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":165,"offset":164},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":165,"offset":164},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":165,"offset":164}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  ...padding('12px', '24px', '36px', '48px')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${padding('12px', '24px', '36px', '48px')}\n`\n\n// CSS as JS Output\n\ndiv {\n  'padding-top': '12px',\n  'padding-right': '24px',\n  'padding-bottom': '36px',\n  'padding-left': '48px'\n}","lineNumber":2}],"loc":{"start":{"line":4,"column":0},"end":{"line":25,"column":3}},"context":{"loc":{"start":{"line":27,"column":0},"end":{"line":29,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/padding.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/padding.js 00000027","code":"// @flow\nimport directionalProperty from '../helpers/directionalProperty'\n\n/**\n * The padding shorthand accepts up to four values, including null to skip a value, and uses the directional-property mixin to map them to their respective directions.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...padding('12px', '24px', '36px', '48px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${padding('12px', '24px', '36px', '48px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'padding-top': '12px',\n *   'padding-right': '24px',\n *   'padding-bottom': '36px',\n *   'padding-left': '48px'\n * }\n */\n\nfunction padding(...values: Array<?string>) {\n  return directionalProperty('padding', ...values)\n}\n\nexport default padding\n","path":"src/shorthands/padding.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/shorthands/padding.js#L27-L29"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  ...padding('12px', '24px', '36px', '48px')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${padding('12px', '24px', '36px', '48px')}\n`\n\n// CSS as JS Output\n\ndiv {\n  'padding-top': '12px',\n  'padding-right': '24px',\n  'padding-bottom': '36px',\n  'padding-left': '48px'\n}"}],"name":"padding","kind":"function","params":[{"title":"param","name":"values","lineNumber":27,"type":{"type":"RestType","expression":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NullableType","expression":{"type":"NameExpression","name":"string"}}]}}}],"members":{"instance":[],"static":[]},"path":[{"name":"padding","kind":"function"}],"namespace":"padding"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"The position shorthand accepts up to five values, including null to skip a value, and uses the directional-property mixin to map them to their respective directions. The first calue can optionally be a position keyword.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":220,"offset":219},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":220,"offset":219},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":220,"offset":219}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  ...position('12px', '24px', '36px', '48px')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${position('12px', '24px', '36px', '48px')}\n`\n\n// CSS as JS Output\n\ndiv {\n  'top': '12px',\n  'right': '24px',\n  'bottom': '36px',\n  'left': '48px'\n}\n\n// Styles as object usage\nconst styles = {\n  ...position('absolute', '12px', '24px', '36px', '48px')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${position('absolute', '12px', '24px', '36px', '48px')}\n`\n\n// CSS as JS Output\n\ndiv {\n  'position': 'absolute',\n  'top': '12px',\n  'right': '24px',\n  'bottom': '36px',\n  'left': '48px'\n}","lineNumber":2}],"loc":{"start":{"line":6,"column":0},"end":{"line":47,"column":3}},"context":{"loc":{"start":{"line":49,"column":0},"end":{"line":59,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/position.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/position.js 00000049","code":"// @flow\nimport directionalProperty from '../helpers/directionalProperty'\n\nconst positionMap = ['absolute', 'fixed', 'relative', 'static', 'sticky']\n\n/**\n * The position shorthand accepts up to five values, including null to skip a value, and uses the directional-property mixin to map them to their respective directions. The first calue can optionally be a position keyword.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...position('12px', '24px', '36px', '48px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${position('12px', '24px', '36px', '48px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'top': '12px',\n *   'right': '24px',\n *   'bottom': '36px',\n *   'left': '48px'\n * }\n *\n * // Styles as object usage\n * const styles = {\n *   ...position('absolute', '12px', '24px', '36px', '48px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${position('absolute', '12px', '24px', '36px', '48px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'position': 'absolute',\n *   'top': '12px',\n *   'right': '24px',\n *   'bottom': '36px',\n *   'left': '48px'\n * }\n */\n\nfunction position(positionKeyword: string|null, ...values: Array<?string>) {\n  if (positionMap.includes(positionKeyword)) {\n    return {\n      position: positionKeyword,\n      ...directionalProperty('', ...values),\n    }\n  } else {\n    const firstValue = positionKeyword // in this case position is actually the first value\n    return directionalProperty('', firstValue, ...values)\n  }\n}\n\nexport default position\n","path":"src/shorthands/position.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/shorthands/position.js#L49-L59"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  ...position('12px', '24px', '36px', '48px')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${position('12px', '24px', '36px', '48px')}\n`\n\n// CSS as JS Output\n\ndiv {\n  'top': '12px',\n  'right': '24px',\n  'bottom': '36px',\n  'left': '48px'\n}\n\n// Styles as object usage\nconst styles = {\n  ...position('absolute', '12px', '24px', '36px', '48px')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${position('absolute', '12px', '24px', '36px', '48px')}\n`\n\n// CSS as JS Output\n\ndiv {\n  'position': 'absolute',\n  'top': '12px',\n  'right': '24px',\n  'bottom': '36px',\n  'left': '48px'\n}"}],"name":"position","kind":"function","params":[{"title":"param","name":"positionKeyword","lineNumber":49,"type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"string"},null]}},{"title":"param","name":"values","lineNumber":49,"type":{"type":"RestType","expression":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NullableType","expression":{"type":"NameExpression","name":"string"}}]}}}],"members":{"instance":[],"static":[]},"path":[{"name":"position","kind":"function"}],"namespace":"position"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Mixin to set the height and width properties in a single statement.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":68,"offset":67},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":68,"offset":67},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":68,"offset":67}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  ...size('300px', '250px')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${size('300px', '250px')}\n`\n\n// CSS as JS Output\n\ndiv {\n  'height': '300px',\n  'width': '250px',\n}","lineNumber":2}],"loc":{"start":{"line":3,"column":0},"end":{"line":22,"column":3}},"context":{"loc":{"start":{"line":24,"column":0},"end":{"line":29,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/size.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/size.js 00000024","code":"// @flow\n\n/**\n * Mixin to set the height and width properties in a single statement.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...size('300px', '250px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${size('300px', '250px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'height': '300px',\n *   'width': '250px',\n * }\n */\n\nfunction size(height: string, width: string = height) {\n  return {\n    height,\n    width,\n  }\n}\n\nexport default size\n","path":"src/shorthands/size.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/shorthands/size.js#L24-L29"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  ...size('300px', '250px')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${size('300px', '250px')}\n`\n\n// CSS as JS Output\n\ndiv {\n  'height': '300px',\n  'width': '250px',\n}"}],"name":"size","kind":"function","params":[{"title":"param","name":"height","lineNumber":24,"type":{"type":"NameExpression","name":"string"}},{"title":"param","name":"width","default":"height","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"string"}}}],"members":{"instance":[],"static":[]},"path":[{"name":"size","kind":"function"}],"namespace":"size"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Populates selectors that target all text inputs. You can pass optional states to append to the selectors.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":106,"offset":105},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":106,"offset":105},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":106,"offset":105}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  [textInputs('active')]: {\n    'border': 'none'\n  }\n}\n\n// styled-components usage\nconst div = styled.div`\n  > ${textInputs('active')} {\n    border: none;\n  }\n`\n\n// CSS in JS Output\n\n ''input[type=\"color\"]:active,\n 'input[type=\"date\"]:active,\n 'input[type=\"datetime\"]:active,\n 'input[type=\"datetime-local\"]:active,\n 'input[type=\"email\"]:active,\n 'input[type=\"month\"]:active,\n 'input[type=\"number\"]:active,\n 'input[type=\"password\"]:active,\n 'input[type=\"search\"]:active,\n 'input[type=\"tel\"]:active,\n 'input[type=\"text\"]:active,\n 'input[type=\"time\"]:active,\n 'input[type=\"url\"]:active,\n 'input[type=\"week\"]:active,\n input:not([type]):active,\n textarea:active': {\n  'border': 'none'\n}","lineNumber":2}],"loc":{"start":{"line":33,"column":0},"end":{"line":70,"column":3}},"context":{"loc":{"start":{"line":72,"column":0},"end":{"line":74,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/textInputs.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/textInputs.js 00000072","code":"// @flow\nimport statefulSelectors from '../internalHelpers/_statefulSelectors'\n\nconst stateMap = [undefined, null, 'active', 'focus', 'hover']\n\nfunction template(state) {\n  return `input[type=\"color\"]${state},\n    input[type=\"date\"]${state},\n    input[type=\"datetime\"]${state},\n    input[type=\"datetime-local\"]${state},\n    input[type=\"email\"]${state},\n    input[type=\"month\"]${state},\n    input[type=\"number\"]${state},\n    input[type=\"password\"]${state},\n    input[type=\"search\"]${state},\n    input[type=\"tel\"]${state},\n    input[type=\"text\"]${state},\n    input[type=\"time\"]${state},\n    input[type=\"url\"]${state},\n    input[type=\"week\"]${state},\n    input:not([type])${state},\n    textarea${state}`\n}\n\n/** */\ntype InputState =\n  | typeof(undefined)\n  | null\n  | 'active'\n  | 'focus'\n  | 'hover';\n\n/**\n * Populates selectors that target all text inputs. You can pass optional states to append to the selectors.\n * @example\n * // Styles as object usage\n * const styles = {\n *   [textInputs('active')]: {\n *     'border': 'none'\n *   }\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   > ${textInputs('active')} {\n *     border: none;\n *   }\n * `\n *\n * // CSS in JS Output\n *\n *  ''input[type=\"color\"]:active,\n *  'input[type=\"date\"]:active,\n *  'input[type=\"datetime\"]:active,\n *  'input[type=\"datetime-local\"]:active,\n *  'input[type=\"email\"]:active,\n *  'input[type=\"month\"]:active,\n *  'input[type=\"number\"]:active,\n *  'input[type=\"password\"]:active,\n *  'input[type=\"search\"]:active,\n *  'input[type=\"tel\"]:active,\n *  'input[type=\"text\"]:active,\n *  'input[type=\"time\"]:active,\n *  'input[type=\"url\"]:active,\n *  'input[type=\"week\"]:active,\n *  input:not([type]):active,\n *  textarea:active': {\n *   'border': 'none'\n * }\n */\n\nfunction textInputs(...states: Array<InputState>) {\n  return statefulSelectors(states, template, stateMap)\n}\n\nexport default textInputs\n","path":"src/shorthands/textInputs.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/shorthands/textInputs.js#L72-L74"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  [textInputs('active')]: {\n    'border': 'none'\n  }\n}\n\n// styled-components usage\nconst div = styled.div`\n  > ${textInputs('active')} {\n    border: none;\n  }\n`\n\n// CSS in JS Output\n\n ''input[type=\"color\"]:active,\n 'input[type=\"date\"]:active,\n 'input[type=\"datetime\"]:active,\n 'input[type=\"datetime-local\"]:active,\n 'input[type=\"email\"]:active,\n 'input[type=\"month\"]:active,\n 'input[type=\"number\"]:active,\n 'input[type=\"password\"]:active,\n 'input[type=\"search\"]:active,\n 'input[type=\"tel\"]:active,\n 'input[type=\"text\"]:active,\n 'input[type=\"time\"]:active,\n 'input[type=\"url\"]:active,\n 'input[type=\"week\"]:active,\n input:not([type]):active,\n textarea:active': {\n  'border': 'none'\n}"}],"name":"textInputs","kind":"function","params":[{"title":"param","name":"states","lineNumber":72,"type":{"type":"RestType","expression":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"InputState"}]}}}],"members":{"instance":[],"static":[]},"path":[{"name":"textInputs","kind":"function"}],"namespace":"textInputs"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"The transitions shorthand accepts any number of transition values as parameters for creating a single transition statement..","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":125,"offset":124},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":125,"offset":124},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":125,"offset":124}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  ...transitions('opacity 1.0s ease-in 0s', 'width 2.0s ease-in 2s')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${...transitions('opacity 1.0s ease-in 0s', 'width 2.0s ease-in 2s')}\n`\n\n// CSS as JS Output\n\ndiv {\n  'transition': 'opacity 1.0s ease-in 0s, width 2.0s ease-in 2s'\n}","lineNumber":2}],"loc":{"start":{"line":3,"column":0},"end":{"line":21,"column":3}},"context":{"loc":{"start":{"line":23,"column":0},"end":{"line":27,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/transitions.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/transitions.js 00000023","code":"// @flow\n\n/**\n * The transitions shorthand accepts any number of transition values as parameters for creating a single transition statement..\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...transitions('opacity 1.0s ease-in 0s', 'width 2.0s ease-in 2s')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${...transitions('opacity 1.0s ease-in 0s', 'width 2.0s ease-in 2s')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'transition': 'opacity 1.0s ease-in 0s, width 2.0s ease-in 2s'\n * }\n */\n\nfunction transitions(...properties: Array<string>) {\n  return {\n    'transition': properties.join(', '),\n  }\n}\n\nexport default transitions\n","path":"src/shorthands/transitions.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/shorthands/transitions.js#L23-L27"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  ...transitions('opacity 1.0s ease-in 0s', 'width 2.0s ease-in 2s')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${...transitions('opacity 1.0s ease-in 0s', 'width 2.0s ease-in 2s')}\n`\n\n// CSS as JS Output\n\ndiv {\n  'transition': 'opacity 1.0s ease-in 0s, width 2.0s ease-in 2s'\n}"}],"name":"transitions","kind":"function","params":[{"title":"param","name":"properties","lineNumber":23,"type":{"type":"RestType","expression":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"string"}]}}}],"members":{"instance":[],"static":[]},"path":[{"name":"transitions","kind":"function"}],"namespace":"transitions"},{"name":"Helpers","kind":"note","members":{"instance":[],"static":[]},"path":[{"name":"Helpers","kind":"note"}],"namespace":"Helpers"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"The directional property helper enables shorthand for direction based properties. It accepts a property and up to four values that map to top, right, bottom, and left, respectively. You can optionally pass an empty string to get only the directional values as properties. You can optionally pass a null argument for a directional value to ignore it.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":350,"offset":349},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":350,"offset":349},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":350,"offset":349}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  ...directionalProperty('padding', '12px', '24px', '36px', '48px')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${directionalProperty('padding', '12px', '24px', '36px', '48px')}\n`\n\n// CSS as JS Output\n\ndiv {\n  'padding-top': '12px',\n  'padding-right': '24px',\n  'padding-bottom': '36px',\n  'padding-left': '48px'\n}","lineNumber":2}],"loc":{"start":{"line":21,"column":0},"end":{"line":42,"column":3}},"context":{"loc":{"start":{"line":44,"column":0},"end":{"line":49,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/helpers/directionalProperty.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/helpers/directionalProperty.js 00000044","code":"// @flow\nconst positionMap = ['top', 'right', 'bottom', 'left']\n\nfunction generateProperty(property: string, position: string) {\n  if (!property) return position\n  const splitPropertyName = property.split('-')\n  splitPropertyName.splice(1, 0, position)\n  return splitPropertyName.join('-')\n}\n\nfunction generateStyles(property: string, valuesWithDefaults: Array<?string>) {\n  const styles = {}\n  for (let i = 0; i < valuesWithDefaults.length; i += 1) {\n    if (valuesWithDefaults[i]) {\n      styles[generateProperty(property, positionMap[i])] = valuesWithDefaults[i]\n    }\n  }\n  return styles\n}\n\n/**\n * The directional property helper enables shorthand for direction based properties. It accepts a property and up to four values that map to top, right, bottom, and left, respectively. You can optionally pass an empty string to get only the directional values as properties. You can optionally pass a null argument for a directional value to ignore it.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...directionalProperty('padding', '12px', '24px', '36px', '48px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${directionalProperty('padding', '12px', '24px', '36px', '48px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'padding-top': '12px',\n *   'padding-right': '24px',\n *   'padding-bottom': '36px',\n *   'padding-left': '48px'\n * }\n */\n\nfunction directionalProperty(property: string, ...values: Array<?string>) {\n  // $FlowIgnoreNextLine doesn't understand destructuring with chained defaults.\n  const [firstValue, secondValue = firstValue, thirdValue = firstValue, fourthValue = secondValue] = values\n  const valuesWithDefaults = [firstValue, secondValue, thirdValue, fourthValue]\n  return generateStyles(property, valuesWithDefaults)\n}\n\nexport default directionalProperty\n","path":"src/helpers/directionalProperty.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/helpers/directionalProperty.js#L44-L49"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  ...directionalProperty('padding', '12px', '24px', '36px', '48px')\n}\n\n// styled-components usage\nconst div = styled.div`\n  ${directionalProperty('padding', '12px', '24px', '36px', '48px')}\n`\n\n// CSS as JS Output\n\ndiv {\n  'padding-top': '12px',\n  'padding-right': '24px',\n  'padding-bottom': '36px',\n  'padding-left': '48px'\n}"}],"name":"directionalProperty","kind":"function","params":[{"title":"param","name":"property","lineNumber":44,"type":{"type":"NameExpression","name":"string"}},{"title":"param","name":"values","lineNumber":44,"type":{"type":"RestType","expression":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NullableType","expression":{"type":"NameExpression","name":"string"}}]}}}],"members":{"instance":[],"static":[]},"path":[{"name":"directionalProperty","kind":"function"}],"namespace":"directionalProperty"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Convert pixel value to ems. The default base value is 16px, but can be changed by passing a\nsecond argument to the function.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2,"column":33,"offset":124},"indent":[1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2,"column":33,"offset":124},"indent":[1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2,"column":33,"offset":124}}},"tags":[{"title":"function","description":null,"lineNumber":3,"name":null},{"title":"param","description":null,"lineNumber":4,"type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"string"},{"type":"NameExpression","name":"number"}]},"name":"pxval"},{"title":"param","description":null,"lineNumber":5,"type":{"type":"OptionalType","expression":{"type":"UnionType","elements":[{"type":"NameExpression","name":"string"},{"type":"NameExpression","name":"number"}]}},"name":"base","default":"'16px'"},{"title":"example","description":"// Styles as object usage\nconst styles = {\n  'height': em('16px')\n}\n\n// styled-components usage\nconst div = styled.div`\n  height: ${em('16px')}\n`\n\n// CSS in JS Output\n\nelement {\n  'height': '1em'\n}","lineNumber":6}],"loc":{"start":{"line":5,"column":0},"end":{"line":27,"column":3}},"context":{"loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":29}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/helpers/em.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/helpers/em.js 00000029","code":"// @flow\n\nimport pixelsto from '../internalHelpers/_pxto'\n\n/**\n * Convert pixel value to ems. The default base value is 16px, but can be changed by passing a\n * second argument to the function.\n * @function\n * @param {string|number} pxval\n * @param {string|number} [base='16px']\n * @example\n * // Styles as object usage\n * const styles = {\n *   'height': em('16px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   height: ${em('16px')}\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   'height': '1em'\n * }\n */\n\nexport default pixelsto('em')\n","path":"src/helpers/em.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/helpers/em.js#L29-L29"},"errors":[],"kind":"function","params":[{"name":"pxval","lineNumber":4,"type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"string"},{"type":"NameExpression","name":"number"}]}},{"name":"base","lineNumber":5,"type":{"type":"OptionalType","expression":{"type":"UnionType","elements":[{"type":"NameExpression","name":"string"},{"type":"NameExpression","name":"number"}]}},"default":"'16px'"}],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  'height': em('16px')\n}\n\n// styled-components usage\nconst div = styled.div`\n  height: ${em('16px')}\n`\n\n// CSS in JS Output\n\nelement {\n  'height': '1em'\n}"}],"name":"em","members":{"instance":[],"static":[]},"path":[{"name":"em","kind":"function"}],"namespace":"em"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Establish consistent measurements and spacial relationships throughout your projects by incrementing up or down a defined scale. We provide a list of commonly used scales as pre-defined variables, see below.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":208,"offset":207},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":208,"offset":207},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":208,"offset":207}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n   // Increment two steps up the default scale\n  'font-size': modularScale(2)\n}\n\n// styled-components usage\nconst div = styled.div`\n   // Increment two steps up the default scale\n  font-size: ${modularScale(2)}\n`\n\n// CSS in JS Output\n\nelement {\n  'font-size': '1.77689em'\n}","lineNumber":2}],"loc":{"start":{"line":46,"column":0},"end":{"line":66,"column":3}},"context":{"loc":{"start":{"line":67,"column":0},"end":{"line":83,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/helpers/modularScale.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/helpers/modularScale.js 00000067","code":"// @flow\n\nimport stripUnit from './stripUnit'\n\nconst ratioNames = {\n  minorSecond: 1.067,\n  majorSecond: 1.125,\n  minorThird: 1.2,\n  majorThird: 1.25,\n  perfectFourth: 1.333,\n  augFourth: 1.414,\n  perfectFifth: 1.5,\n  minorSixth: 1.6,\n  goldenSection: 1.618,\n  majorSixth: 1.667,\n  minorSeventh: 1.778,\n  majorSeventh: 1.875,\n  octave: 2,\n  majorTenth: 2.5,\n  majorEleventh: 2.667,\n  majorTwelfth: 3,\n  doubleOctave: 4,\n}\n\n/** */\ntype Ratio =\n  | number\n  | 'minorSecond'\n  | 'majorSecond'\n  | 'minorThird'\n  | 'majorThird'\n  | 'perfectFourth'\n  | 'augFourth'\n  | 'perfectFifth'\n  | 'minorSixth'\n  | 'goldenSection'\n  | 'majorSixth'\n  | 'minorSeventh'\n  | 'majorSeventh'\n  | 'octave'\n  | 'majorTenth'\n  | 'majorEleventh'\n  | 'majorTwelfth'\n  | 'doubleOctave'\n\n/**\n * Establish consistent measurements and spacial relationships throughout your projects by incrementing up or down a defined scale. We provide a list of commonly used scales as pre-defined variables, see below.\n * @example\n * // Styles as object usage\n * const styles = {\n *    // Increment two steps up the default scale\n *   'font-size': modularScale(2)\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *    // Increment two steps up the default scale\n *   font-size: ${modularScale(2)}\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   'font-size': '1.77689em'\n * }\n */\nfunction modularScale(steps: number, base?: number|string = '1em', ratio?: Ratio = 'perfectFourth') {\n  if (!steps) {\n    throw new Error('Please provide a number of steps to the modularScale helper.')\n  }\n  if (typeof ratio === 'string' && !ratioNames[ratio]) {\n    throw new Error('Please pass a number or one of the predefined scales to the modularScale helper as the ratio.')\n  }\n\n  const realBase = typeof base === 'string' ? stripUnit(base) : base\n  const realRatio = typeof ratio === 'string' ? ratioNames[ratio] : ratio\n\n  if (typeof realBase === 'string') {\n    throw new Error(`Invalid value passed as base to modularScale, expected number or em string but got \"${base}\"`)\n  }\n\n  return `${realBase * realRatio * steps}em`\n}\n\nexport { ratioNames }\nexport default modularScale\n","path":"src/helpers/modularScale.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/helpers/modularScale.js#L67-L83"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n   // Increment two steps up the default scale\n  'font-size': modularScale(2)\n}\n\n// styled-components usage\nconst div = styled.div`\n   // Increment two steps up the default scale\n  font-size: ${modularScale(2)}\n`\n\n// CSS in JS Output\n\nelement {\n  'font-size': '1.77689em'\n}"}],"name":"modularScale","kind":"function","params":[{"title":"param","name":"steps","lineNumber":67,"type":{"type":"NameExpression","name":"number"}},{"title":"param","name":"base","default":"'1em'","type":{"type":"OptionalType","expression":{"type":"UnionType","elements":[{"type":"NameExpression","name":"number"},{"type":"NameExpression","name":"string"}]}}},{"title":"param","name":"ratio","default":"'perfectFourth'","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Ratio"}}}],"members":{"instance":[],"static":[]},"path":[{"name":"modularScale","kind":"function"}],"namespace":"modularScale"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Convert pixel value to rems. The default base value is 16px, but can be changed by passing a\nsecond argument to the function.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2,"column":33,"offset":125},"indent":[1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2,"column":33,"offset":125},"indent":[1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2,"column":33,"offset":125}}},"tags":[{"title":"function","description":null,"lineNumber":3,"name":null},{"title":"param","description":null,"lineNumber":4,"type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"string"},{"type":"NameExpression","name":"number"}]},"name":"pxval"},{"title":"param","description":null,"lineNumber":5,"type":{"type":"OptionalType","expression":{"type":"UnionType","elements":[{"type":"NameExpression","name":"string"},{"type":"NameExpression","name":"number"}]}},"name":"base","default":"'16px'"},{"title":"example","description":"// Styles as object usage\nconst styles = {\n  'height': rem('16px')\n}\n\n// styled-components usage\nconst div = styled.div`\n  height: ${rem('16px')}\n`\n\n// CSS in JS Output\n\nelement {\n  'height': '1rem'\n}","lineNumber":6}],"loc":{"start":{"line":5,"column":0},"end":{"line":27,"column":3}},"context":{"loc":{"start":{"line":28,"column":0},"end":{"line":28,"column":30}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/helpers/rem.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/helpers/rem.js 00000028","code":"// @flow\n\nimport pixelsto from '../internalHelpers/_pxto'\n\n/**\n * Convert pixel value to rems. The default base value is 16px, but can be changed by passing a\n * second argument to the function.\n * @function\n * @param {string|number} pxval\n * @param {string|number} [base='16px']\n * @example\n * // Styles as object usage\n * const styles = {\n *   'height': rem('16px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   height: ${rem('16px')}\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   'height': '1rem'\n * }\n */\nexport default pixelsto('rem')\n","path":"src/helpers/rem.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/helpers/rem.js#L28-L28"},"errors":[],"kind":"function","params":[{"name":"pxval","lineNumber":4,"type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"string"},{"type":"NameExpression","name":"number"}]}},{"name":"base","lineNumber":5,"type":{"type":"OptionalType","expression":{"type":"UnionType","elements":[{"type":"NameExpression","name":"string"},{"type":"NameExpression","name":"number"}]}},"default":"'16px'"}],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  'height': rem('16px')\n}\n\n// styled-components usage\nconst div = styled.div`\n  height: ${rem('16px')}\n`\n\n// CSS in JS Output\n\nelement {\n  'height': '1rem'\n}"}],"name":"rem","members":{"instance":[],"static":[]},"path":[{"name":"rem","kind":"function"}],"namespace":"rem"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Strip the unit from a given CSS value, returning just the number. (or the original value if an invalid string was passed)","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":122,"offset":121},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":122,"offset":121},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":122,"offset":121}}},"tags":[{"title":"example","description":"// Styles as object usage\nconst styles = {\n  '--dimension': stripUnit(100px)\n}\n\n// styled-components usage\nconst div = styled.div`\n  --dimension: ${stripUnit(100px)}\n`\n\n// CSS in JS Output\n\nelement {\n  '--dimension': 100\n}","lineNumber":3}],"loc":{"start":{"line":3,"column":0},"end":{"line":22,"column":3}},"context":{"loc":{"start":{"line":24,"column":0},"end":{"line":28,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/helpers/stripUnit.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/helpers/stripUnit.js 00000024","code":"// @flow\n\n/**\n * Strip the unit from a given CSS value, returning just the number. (or the original value if an invalid string was passed)\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   '--dimension': stripUnit(100px)\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   --dimension: ${stripUnit(100px)}\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   '--dimension': 100\n * }\n */\n\nfunction stripUnit(value: string): number|string {\n  const unitlessValue = parseFloat(value)\n  if (isNaN(unitlessValue)) return value\n  return unitlessValue\n}\n\nexport default stripUnit\n","path":"src/helpers/stripUnit.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/helpers/stripUnit.js#L24-L28"},"errors":[],"examples":[{"description":"// Styles as object usage\nconst styles = {\n  '--dimension': stripUnit(100px)\n}\n\n// styled-components usage\nconst div = styled.div`\n  --dimension: ${stripUnit(100px)}\n`\n\n// CSS in JS Output\n\nelement {\n  '--dimension': 100\n}"}],"name":"stripUnit","kind":"function","params":[{"title":"param","name":"value","lineNumber":24,"type":{"type":"NameExpression","name":"string"}}],"returns":[{"type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"number"},{"type":"NameExpression","name":"string"}]}}],"members":{"instance":[],"static":[]},"path":[{"name":"stripUnit","kind":"function"}],"namespace":"stripUnit"},{"name":"Types","kind":"note","members":{"instance":[],"static":[]},"path":[{"name":"Types","kind":"note"}],"namespace":"Types"},{"description":"","tags":[],"loc":{"start":{"line":25,"column":0},"end":{"line":25,"column":6}},"context":{"loc":{"start":{"line":26,"column":0},"end":{"line":44,"column":18}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/helpers/modularScale.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/helpers/modularScale.js 00000026","code":"// @flow\n\nimport stripUnit from './stripUnit'\n\nconst ratioNames = {\n  minorSecond: 1.067,\n  majorSecond: 1.125,\n  minorThird: 1.2,\n  majorThird: 1.25,\n  perfectFourth: 1.333,\n  augFourth: 1.414,\n  perfectFifth: 1.5,\n  minorSixth: 1.6,\n  goldenSection: 1.618,\n  majorSixth: 1.667,\n  minorSeventh: 1.778,\n  majorSeventh: 1.875,\n  octave: 2,\n  majorTenth: 2.5,\n  majorEleventh: 2.667,\n  majorTwelfth: 3,\n  doubleOctave: 4,\n}\n\n/** */\ntype Ratio =\n  | number\n  | 'minorSecond'\n  | 'majorSecond'\n  | 'minorThird'\n  | 'majorThird'\n  | 'perfectFourth'\n  | 'augFourth'\n  | 'perfectFifth'\n  | 'minorSixth'\n  | 'goldenSection'\n  | 'majorSixth'\n  | 'minorSeventh'\n  | 'majorSeventh'\n  | 'octave'\n  | 'majorTenth'\n  | 'majorEleventh'\n  | 'majorTwelfth'\n  | 'doubleOctave'\n\n/**\n * Establish consistent measurements and spacial relationships throughout your projects by incrementing up or down a defined scale. We provide a list of commonly used scales as pre-defined variables, see below.\n * @example\n * // Styles as object usage\n * const styles = {\n *    // Increment two steps up the default scale\n *   'font-size': modularScale(2)\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *    // Increment two steps up the default scale\n *   font-size: ${modularScale(2)}\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   'font-size': '1.77689em'\n * }\n */\nfunction modularScale(steps: number, base?: number|string = '1em', ratio?: Ratio = 'perfectFourth') {\n  if (!steps) {\n    throw new Error('Please provide a number of steps to the modularScale helper.')\n  }\n  if (typeof ratio === 'string' && !ratioNames[ratio]) {\n    throw new Error('Please pass a number or one of the predefined scales to the modularScale helper as the ratio.')\n  }\n\n  const realBase = typeof base === 'string' ? stripUnit(base) : base\n  const realRatio = typeof ratio === 'string' ? ratioNames[ratio] : ratio\n\n  if (typeof realBase === 'string') {\n    throw new Error(`Invalid value passed as base to modularScale, expected number or em string but got \"${base}\"`)\n  }\n\n  return `${realBase * realRatio * steps}em`\n}\n\nexport { ratioNames }\nexport default modularScale\n","path":"src/helpers/modularScale.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/helpers/modularScale.js#L26-L44"},"errors":[],"name":"Ratio","kind":"typedef","members":{"instance":[],"static":[]},"path":[{"name":"Ratio","kind":"typedef"}],"namespace":"Ratio"},{"description":"","tags":[],"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":6}},"context":{"loc":{"start":{"line":19,"column":0},"end":{"line":23,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/types/color.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/types/color.js 00000019","code":"// @flow\n\n/** */\nexport type HslColor = {\n  hue: number,\n  saturation: number,\n  lightness: number,\n}\n\n/** */\nexport type HslaColor = {\n  hue: number,\n  saturation: number,\n  lightness: number,\n  alpha: number,\n}\n\n/** */\nexport type RgbColor = {\n  red: number,\n  green: number,\n  blue: number,\n}\n\n/** */\nexport type RgbaColor = {\n  red: number,\n  green: number,\n  blue: number,\n  alpha: number,\n}\n","path":"src/types/color.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/types/color.js#L19-L23"},"errors":[],"name":"RgbColor","members":{"instance":[],"static":[]},"path":[{"name":"RgbColor"}],"namespace":"RgbColor"},{"description":"","tags":[],"loc":{"start":{"line":25,"column":0},"end":{"line":25,"column":6}},"context":{"loc":{"start":{"line":26,"column":0},"end":{"line":31,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/types/color.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/types/color.js 00000026","code":"// @flow\n\n/** */\nexport type HslColor = {\n  hue: number,\n  saturation: number,\n  lightness: number,\n}\n\n/** */\nexport type HslaColor = {\n  hue: number,\n  saturation: number,\n  lightness: number,\n  alpha: number,\n}\n\n/** */\nexport type RgbColor = {\n  red: number,\n  green: number,\n  blue: number,\n}\n\n/** */\nexport type RgbaColor = {\n  red: number,\n  green: number,\n  blue: number,\n  alpha: number,\n}\n","path":"src/types/color.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/types/color.js#L26-L31"},"errors":[],"name":"RgbaColor","members":{"instance":[],"static":[]},"path":[{"name":"RgbaColor"}],"namespace":"RgbaColor"},{"description":"","tags":[],"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":6}},"context":{"loc":{"start":{"line":4,"column":0},"end":{"line":8,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/types/color.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/types/color.js 00000004","code":"// @flow\n\n/** */\nexport type HslColor = {\n  hue: number,\n  saturation: number,\n  lightness: number,\n}\n\n/** */\nexport type HslaColor = {\n  hue: number,\n  saturation: number,\n  lightness: number,\n  alpha: number,\n}\n\n/** */\nexport type RgbColor = {\n  red: number,\n  green: number,\n  blue: number,\n}\n\n/** */\nexport type RgbaColor = {\n  red: number,\n  green: number,\n  blue: number,\n  alpha: number,\n}\n","path":"src/types/color.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/types/color.js#L4-L8"},"errors":[],"name":"HslColor","members":{"instance":[],"static":[]},"path":[{"name":"HslColor"}],"namespace":"HslColor"},{"description":"","tags":[],"loc":{"start":{"line":10,"column":0},"end":{"line":10,"column":6}},"context":{"loc":{"start":{"line":11,"column":0},"end":{"line":16,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/types/color.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/types/color.js 00000011","code":"// @flow\n\n/** */\nexport type HslColor = {\n  hue: number,\n  saturation: number,\n  lightness: number,\n}\n\n/** */\nexport type HslaColor = {\n  hue: number,\n  saturation: number,\n  lightness: number,\n  alpha: number,\n}\n\n/** */\nexport type RgbColor = {\n  red: number,\n  green: number,\n  blue: number,\n}\n\n/** */\nexport type RgbaColor = {\n  red: number,\n  green: number,\n  blue: number,\n  alpha: number,\n}\n","path":"src/types/color.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/types/color.js#L11-L16"},"errors":[],"name":"HslaColor","members":{"instance":[],"static":[]},"path":[{"name":"HslaColor"}],"namespace":"HslaColor"},{"description":"","tags":[],"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":6}},"context":{"loc":{"start":{"line":4,"column":0},"end":{"line":14,"column":1}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/fontFace.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/fontFace.js 00000004","code":"// @flow\n\n/** */\ntype FontFaceConfiguration = {\n  fontFamily: string;\n  fontFilePath?: string;\n  fontStretch?: string;\n  fontStyle?: string;\n  fontVariant?: string;\n  fontWeight?: string;\n  fileFormats?: Array<string>;\n  localFonts?: Array<string>;\n  unicodeRange?: string\n}\n\nfunction generateFileReferences(fontFilePath: string, fileFormats: Array<string>) {\n  const fileFontReferences = fileFormats.map((format) => `url(\"${fontFilePath}.${format}\")`)\n  return fileFontReferences.join(', ')\n}\n\nfunction generateLocalReferences(localFonts: Array<string>) {\n  const localFontReferences = localFonts.map((font) => `local(\"${font}\")`)\n  return localFontReferences.join(', ')\n}\n\nfunction generateSources(fontFilePath?: string, localFonts?: Array<string>, fileFormats: Array<string>) {\n  const fontReferences = []\n  if (localFonts) fontReferences.push(generateLocalReferences(localFonts))\n  if (fontFilePath) fontReferences.push(generateFileReferences(fontFilePath, fileFormats))\n  return fontReferences.join(', ')\n}\n\n/**\n * CSS for a @font-face declaration.\n *\n * @example\n * // Styles as object basic usage\n * const styles = {\n *    ...fontFace({\n *      'fontFamily': 'Sans-Pro'\n *      'fontFilePath': 'path/to/file'\n *    })\n * }\n *\n * // styled-components basic usage\n * injectGlobals`${\n *   fontFace({\n *     'fontFamily': 'Sans-Pro'\n *     'fontFilePath': 'path/to/file'\n *   }\n * )}`\n *\n * // CSS as JS Output\n *\n * '@font-face': {\n *   'font-family': 'Sans-Pro',\n *   'src': 'url(\"path/to/file.eot\"), url(\"path/to/file.woff2\"), url(\"path/to/file.woff\"), url(\"path/to/file.ttf\"), url(\"path/to/file.svg\")',\n * }\n */\n\nfunction fontFace({\n    fontFamily,\n    fontFilePath,\n    fontStretch,\n    fontStyle,\n    fontVariant,\n    fontWeight,\n    fileFormats = ['eot', 'woff2', 'woff', 'ttf', 'svg'],\n    localFonts,\n    unicodeRange,\n  }: FontFaceConfiguration) {\n  // Error Handling\n  if (!fontFamily) throw new Error('fontFace expects a name of a font-family.')\n  if (!fontFilePath && !localFonts) throw new Error('fontFace expects either the path to the font file(s) or a name of a local copy.')\n  if (localFonts && !Array.isArray(localFonts)) throw new Error('fontFace expects localFonts to be an array.')\n  if (!Array.isArray(fileFormats)) throw new Error('fontFace expects fileFormats to be an array.')\n\n  const fontFaceDeclaration = {\n    '@font-face': {\n      'font-family': fontFamily,\n      'src': generateSources(fontFilePath, localFonts, fileFormats),\n      'unicode-range': unicodeRange,\n      'font-stretch': fontStretch,\n      'font-style': fontStyle,\n      'font-variant': fontVariant,\n      'font-weight': fontWeight,\n    },\n  }\n\n  // Removes undefined fields for cleaner css object.\n  return JSON.parse(JSON.stringify(fontFaceDeclaration))\n}\n\nexport default fontFace\n","path":"src/mixins/fontFace.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/mixins/fontFace.js#L4-L14"},"errors":[],"name":"FontFaceConfiguration","kind":"typedef","properties":[{"title":"property","name":"fontFamily","lineNumber":5,"type":{"type":"NameExpression","name":"string"}},{"title":"property","name":"fontFilePath","lineNumber":6,"type":{"type":"NameExpression","name":"string"}},{"title":"property","name":"fontStretch","lineNumber":7,"type":{"type":"NameExpression","name":"string"}},{"title":"property","name":"fontStyle","lineNumber":8,"type":{"type":"NameExpression","name":"string"}},{"title":"property","name":"fontVariant","lineNumber":9,"type":{"type":"NameExpression","name":"string"}},{"title":"property","name":"fontWeight","lineNumber":10,"type":{"type":"NameExpression","name":"string"}},{"title":"property","name":"fileFormats","lineNumber":11,"type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"string"}]}},{"title":"property","name":"localFonts","lineNumber":12,"type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"string"}]}},{"title":"property","name":"unicodeRange","lineNumber":13,"type":{"type":"NameExpression","name":"string"}}],"members":{"instance":[],"static":[]},"path":[{"name":"FontFaceConfiguration","kind":"typedef"}],"namespace":"FontFaceConfiguration"},{"description":"","tags":[],"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":6}},"context":{"loc":{"start":{"line":4,"column":0},"end":{"line":10,"column":2}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/radialGradient.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/radialGradient.js 00000004","code":"// @flow\n\n/** */\ntype RadialGradientConfiguration = {\n  colorStops: Array<string>;\n  extent?: string;\n  fallback?: string;\n  position?: string;\n  shape?: string;\n};\n\nfunction parseFallback(colorStops: Array<string>) {\n  return colorStops[0].split(' ')[0]\n}\n\nfunction constructGradientValue(literals: Array<string>, ...substitutions: Array<string>) {\n  let template = ''\n  for (let i = 0; i < literals.length; i += 1) {\n    template += literals[i]\n    // Adds leading coma if properties preceed color-stops\n    if ((i === 3 && substitutions[i]) && (substitutions[0] || substitutions[1] || substitutions[2])) {\n      template = template.slice(0, -1)\n      template += `, ${substitutions[i]}`\n    // No trailing space if color-stops is the only param provided\n    } else if ((i === 3 && substitutions[i]) && (!substitutions[0] && !substitutions[1] && !substitutions[2])) {\n      template += `${substitutions[i]}`\n    // Only adds substitution if it is defined\n    } else if (substitutions[i]) {\n      template += `${substitutions[i]} `\n    }\n  }\n  return template.trim()\n}\n\n/**\n * CSS for declaring a radial gradient, including a fallback background-color. The fallback is either the first color-stop or an explicitly passed fallback color.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...radialGradient({\n *     colorStops: ['#00FFFF 0%', 'rgba(0, 0, 255, 0) 50%', '#0000FF 95%'],\n *     extent: 'farthest-corner at 45px 45px',\n *     position: 'center',\n *     shape: 'ellipse',\n *   })\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${radialGradient({\n *     colorStops: ['#00FFFF 0%', 'rgba(0, 0, 255, 0) 50%', '#0000FF 95%'],\n *     extent: 'farthest-corner at 45px 45px',\n *     position: 'center',\n *     shape: 'ellipse',\n *   })}\n *`\n *\n * // CSS as JS Output\n *\n * div: {\n *   'background-color': '#00FFFF',\n *   'background-image': 'radial-gradient(center ellipse farthest-corner at 45px 45px, #00FFFF 0%, rgba(0, 0, 255, 0) 50%, #0000FF 95%)',\n * }\n */\n\nfunction radialGradient({\n  colorStops,\n  extent,\n  fallback,\n  position,\n  shape,\n}: RadialGradientConfiguration) {\n  if (!colorStops || colorStops.length < 2) throw new Error('radialGradient requries at least 2 color-stops to properly render.')\n  return {\n    'background-color': fallback || parseFallback(colorStops),\n    'background-image': constructGradientValue`radial-gradient(${position}${shape}${extent}${colorStops.join(', ')})`,\n  }\n}\n\nexport default radialGradient\n","path":"src/mixins/radialGradient.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/mixins/radialGradient.js#L4-L10"},"errors":[],"name":"RadialGradientConfiguration","kind":"typedef","properties":[{"title":"property","name":"colorStops","lineNumber":5,"type":{"type":"TypeApplication","expression":{"type":"NameExpression","name":"Array"},"applications":[{"type":"NameExpression","name":"string"}]}},{"title":"property","name":"extent","lineNumber":6,"type":{"type":"NameExpression","name":"string"}},{"title":"property","name":"fallback","lineNumber":7,"type":{"type":"NameExpression","name":"string"}},{"title":"property","name":"position","lineNumber":8,"type":{"type":"NameExpression","name":"string"}},{"title":"property","name":"shape","lineNumber":9,"type":{"type":"NameExpression","name":"string"}}],"members":{"instance":[],"static":[]},"path":[{"name":"RadialGradientConfiguration","kind":"typedef"}],"namespace":"RadialGradientConfiguration"},{"description":"","tags":[],"loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":6}},"context":{"loc":{"start":{"line":35,"column":0},"end":{"line":59,"column":20}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/timingFunctions.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/timingFunctions.js 00000035","code":"// @flow\n\n/* eslint-disable key-spacing */\nconst functionsMap = {\n  'easeInBack':     'cubic-bezier(0.600, -0.280, 0.735, 0.045)',\n  'easeInCirc':     'cubic-bezier(0.600,  0.040, 0.980, 0.335)',\n  'easeInCubic':    'cubic-bezier(0.550,  0.055, 0.675, 0.190)',\n  'easeInExpo':     'cubic-bezier(0.950,  0.050, 0.795, 0.035)',\n  'easeInQuad':     'cubic-bezier(0.550,  0.085, 0.680, 0.530)',\n  'easeInQuart':    'cubic-bezier(0.895,  0.030, 0.685, 0.220)',\n  'easeInQuint':    'cubic-bezier(0.755,  0.050, 0.855, 0.060)',\n  'easeInSine':     'cubic-bezier(0.470,  0.000, 0.745, 0.715)',\n\n  'easeOutBack':    'cubic-bezier(0.175,  0.885, 0.320, 1.275)',\n  'easeOutCubic':   'cubic-bezier(0.215,  0.610, 0.355, 1.000)',\n  'easeOutCirc':    'cubic-bezier(0.075,  0.820, 0.165, 1.000)',\n  'easeOutExpo':    'cubic-bezier(0.190,  1.000, 0.220, 1.000)',\n  'easeOutQuad':    'cubic-bezier(0.250,  0.460, 0.450, 0.940)',\n  'easeOutQuart':   'cubic-bezier(0.165,  0.840, 0.440, 1.000)',\n  'easeOutQuint':   'cubic-bezier(0.230,  1.000, 0.320, 1.000)',\n  'easeOutSine':    'cubic-bezier(0.390,  0.575, 0.565, 1.000)',\n\n  'easeInOutBack':  'cubic-bezier(0.680, -0.550, 0.265, 1.550)',\n  'easeInOutCirc':  'cubic-bezier(0.785,  0.135, 0.150, 0.860)',\n  'easeInOutCubic': 'cubic-bezier(0.645,  0.045, 0.355, 1.000)',\n  'easeInOutExpo':  'cubic-bezier(1.000,  0.000, 0.000, 1.000)',\n  'easeInOutQuad':  'cubic-bezier(0.455,  0.030, 0.515, 0.955)',\n  'easeInOutQuart': 'cubic-bezier(0.770,  0.000, 0.175, 1.000)',\n  'easeInOutQuint': 'cubic-bezier(0.860,  0.000, 0.070, 1.000)',\n  'easeInOutSine':  'cubic-bezier(0.445,  0.050, 0.550, 0.950)',\n}\n/* eslint-enable key-spacing */\n\n/** */\ntype TimingFunction =\n  | 'easeInBack'\n  | 'easeInCirc'\n  | 'easeInCubic'\n  | 'easeInExpo'\n  | 'easeInQuad'\n  | 'easeInQuart'\n  | 'easeInQuint'\n  | 'easeInSine'\n  | 'easeOutBack'\n  | 'easeOutCubic'\n  | 'easeOutCirc'\n  | 'easeOutExpo'\n  | 'easeOutQuad'\n  | 'easeOutQuart'\n  | 'easeOutQuint'\n  | 'easeOutSine'\n  | 'easeInOutBack'\n  | 'easeInOutCirc'\n  | 'easeInOutCubic'\n  | 'easeInOutExpo'\n  | 'easeInOutQuad'\n  | 'easeInOutQuart'\n  | 'easeInOutQuint'\n  | 'easeInOutSine';\n\n/**\n * String to represent commong easing functions as demonstrated here: (github.com/jaukia/easie).\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   'transition-timing-function': timingFunctions('easeInQuad')\n * }\n *\n * // styled-components usage\n *  const div = styled.div`\n *   transition-timing-function: ${timingFunctions('easeInQuad')};\n * `\n *\n * // CSS as JS Output\n *\n * 'div': {\n *   'transition-timing-function': 'cubic-bezier(0.550,  0.085, 0.680, 0.530)',\n * }\n */\n\nfunction timingFunctions(timingFunction: TimingFunction) {\n  return functionsMap[timingFunction]\n}\n\nexport default timingFunctions\n","path":"src/mixins/timingFunctions.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/mixins/timingFunctions.js#L35-L59"},"errors":[],"name":"TimingFunction","kind":"typedef","members":{"instance":[],"static":[]},"path":[{"name":"TimingFunction","kind":"typedef"}],"namespace":"TimingFunction"},{"description":"","tags":[],"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":6}},"context":{"loc":{"start":{"line":4,"column":0},"end":{"line":4,"column":38}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/animation.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/animation.js 00000004","code":"// @flow\n\n/** */\ntype AnimationProperty = string|number\n\n/**\n * Shorthand for easily setting the animation property. Allows either multiple arrays with animations\n * or a single animation spread over the arguments.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...animation(['rotate', '1s', 'ease-in-out'], ['colorchange', '2s'])\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${animation(['rotate', '1s', 'ease-in-out'], ['colorchange', '2s'])}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'animation': 'rotate 1s ease-in-out, colorchange 2s'\n * }\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...animation('rotate', '1s', 'ease-in-out')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${animation('rotate', '1s', 'ease-in-out')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'animation': 'rotate 1s ease-in-out'\n * }\n */\nfunction animation(...args: Array<Array<AnimationProperty>|AnimationProperty>) {\n  // Allow single or multiple animations passed\n  const multiMode = Array.isArray(args[0])\n  if (!multiMode && args.length > 8) {\n    throw new Error('The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation')\n  }\n  const code = args.map(arg => {\n    if ((multiMode && !Array.isArray(arg)) || (!multiMode && Array.isArray(arg))) {\n      throw new Error('To pass multiple animations please supply them in arrays, e.g. animation([\\'rotate\\', \\'2s\\'], [\\'move\\', \\'1s\\'])\\nTo pass a single animation please supply them in simple values, e.g. animation(\\'rotate\\', \\'2s\\')')\n    }\n    if (Array.isArray(arg) && arg.length > 8) {\n      throw new Error('The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation')\n    }\n\n    return Array.isArray(arg) ? arg.join(' ') : arg\n  }).join(', ')\n\n  return {\n    'animation': code,\n  }\n}\n\nexport default animation\n","path":"src/shorthands/animation.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/shorthands/animation.js#L4-L4"},"errors":[],"name":"AnimationProperty","kind":"typedef","members":{"instance":[],"static":[]},"path":[{"name":"AnimationProperty","kind":"typedef"}],"namespace":"AnimationProperty"},{"description":"","tags":[],"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":6}},"context":{"loc":{"start":{"line":14,"column":0},"end":{"line":19,"column":12}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/buttons.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/buttons.js 00000014","code":"// @flow\nimport statefulSelectors from '../internalHelpers/_statefulSelectors'\n\nconst stateMap = [undefined, null, 'active', 'focus', 'hover']\n\nfunction template(state) {\n  return `button${state},\n  input[type=\"button\"]${state},\n  input[type=\"reset\"]${state},\n  input[type=\"submit\"]${state}`\n}\n\n/** */\ntype ButtonState =\n  | typeof(undefined)\n  | null\n  | 'active'\n  | 'focus'\n  | 'hover';\n\n/**\n * Populates selectors that target all buttons. You can pass optional states to append to the selectors.\n * @example\n * // Styles as object usage\n * const styles = {\n *   [buttons('active')]: {\n *     'border': 'none'\n *   }\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   > ${buttons('active')} {\n *     border: none;\n *   }\n * `\n *\n * // CSS in JS Output\n *\n *  'button:active,\n *  'input[type=\"button\"]:active,\n *  'input[type=\\\"reset\\\"]:active,\n *  'input[type=\\\"submit\\\"]:active: {\n *   'border': 'none'\n * }\n */\n\nfunction buttons(...states: Array<ButtonState>) {\n  return statefulSelectors(states, template, stateMap)\n}\n\nexport default buttons\n","path":"src/shorthands/buttons.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/shorthands/buttons.js#L14-L19"},"errors":[],"name":"ButtonState","kind":"typedef","members":{"instance":[],"static":[]},"path":[{"name":"ButtonState","kind":"typedef"}],"namespace":"ButtonState"},{"description":"","tags":[],"loc":{"start":{"line":25,"column":0},"end":{"line":25,"column":6}},"context":{"loc":{"start":{"line":26,"column":0},"end":{"line":31,"column":12}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/textInputs.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/shorthands/textInputs.js 00000026","code":"// @flow\nimport statefulSelectors from '../internalHelpers/_statefulSelectors'\n\nconst stateMap = [undefined, null, 'active', 'focus', 'hover']\n\nfunction template(state) {\n  return `input[type=\"color\"]${state},\n    input[type=\"date\"]${state},\n    input[type=\"datetime\"]${state},\n    input[type=\"datetime-local\"]${state},\n    input[type=\"email\"]${state},\n    input[type=\"month\"]${state},\n    input[type=\"number\"]${state},\n    input[type=\"password\"]${state},\n    input[type=\"search\"]${state},\n    input[type=\"tel\"]${state},\n    input[type=\"text\"]${state},\n    input[type=\"time\"]${state},\n    input[type=\"url\"]${state},\n    input[type=\"week\"]${state},\n    input:not([type])${state},\n    textarea${state}`\n}\n\n/** */\ntype InputState =\n  | typeof(undefined)\n  | null\n  | 'active'\n  | 'focus'\n  | 'hover';\n\n/**\n * Populates selectors that target all text inputs. You can pass optional states to append to the selectors.\n * @example\n * // Styles as object usage\n * const styles = {\n *   [textInputs('active')]: {\n *     'border': 'none'\n *   }\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   > ${textInputs('active')} {\n *     border: none;\n *   }\n * `\n *\n * // CSS in JS Output\n *\n *  ''input[type=\"color\"]:active,\n *  'input[type=\"date\"]:active,\n *  'input[type=\"datetime\"]:active,\n *  'input[type=\"datetime-local\"]:active,\n *  'input[type=\"email\"]:active,\n *  'input[type=\"month\"]:active,\n *  'input[type=\"number\"]:active,\n *  'input[type=\"password\"]:active,\n *  'input[type=\"search\"]:active,\n *  'input[type=\"tel\"]:active,\n *  'input[type=\"text\"]:active,\n *  'input[type=\"time\"]:active,\n *  'input[type=\"url\"]:active,\n *  'input[type=\"week\"]:active,\n *  input:not([type]):active,\n *  textarea:active': {\n *   'border': 'none'\n * }\n */\n\nfunction textInputs(...states: Array<InputState>) {\n  return statefulSelectors(states, template, stateMap)\n}\n\nexport default textInputs\n","path":"src/shorthands/textInputs.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/shorthands/textInputs.js#L26-L31"},"errors":[],"name":"InputState","kind":"typedef","members":{"instance":[],"static":[]},"path":[{"name":"InputState","kind":"typedef"}],"namespace":"InputState"},{"description":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"CSS to represent triangle with any pointing direction.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":55,"offset":54},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":55,"offset":54},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":55,"offset":54}}},"tags":[{"title":"example","description":"// Styles as object usage\n\nconst styles = {\n  ...triangle({ pointing: 'right', width: '100px', height: '100px', color: 'red' })\n}\n\n\n// styled-components usage\nconst div = styled.div`\n  ${triangle({ pointing: 'right', width: '100px', height: '100px', color: 'red' })}\n\n\n// CSS as JS Output\n\ndiv: {\n 'border-color': 'transparent',\n 'border-left-color': 'red !important',\n 'border-style': 'solid',\n 'border-width': '50px 0 50px 100px',\n 'height': '0',\n 'width': '0',\n}","lineNumber":3}],"loc":{"start":{"line":4,"column":0},"end":{"line":30,"column":3}},"context":{"loc":{"start":{"line":32,"column":0},"end":{"line":32,"column":60}},"file":"/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/triangle.js","sortKey":"!/Users/a2517/sites/personal/github/styled-comps/polished/src/mixins/triangle.js 00000032","code":"// @flow\n\n\n/**\n * CSS to represent triangle with any pointing direction.\n *\n * @example\n * // Styles as object usage\n *\n * const styles = {\n *   ...triangle({ pointing: 'right', width: '100px', height: '100px', color: 'red' })\n * }\n *\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${triangle({ pointing: 'right', width: '100px', height: '100px', color: 'red' })}\n *\n *\n * // CSS as JS Output\n *\n * div: {\n *  'border-color': 'transparent',\n *  'border-left-color': 'red !important',\n *  'border-style': 'solid',\n *  'border-width': '50px 0 50px 100px',\n *  'height': '0',\n *  'width': '0',\n * }\n */\n\ntype PointingDirection = 'top' | 'right' | 'bottom' | 'left'\n\ntype BorderWidthArgs = {\n  height: number,\n  width: number,\n  pointingDirection: PointingDirection,\n}\n\ntype TriangleArgs = BorderWidthArgs & {\n  color: string,\n}\n\nconst getBorderWidth = ({ pointingDirection, height, width } : BorderWidthArgs) => {\n  switch (pointingDirection) {\n    case 'top': return `0 ${width / 2}px ${height}px ${width / 2}px`\n    case 'left': return `${height / 2}px ${width}px ${height / 2}px 0`\n    case 'bottom': return `${height}px ${width / 2}px 0 ${width / 2}px`\n    case 'right': return `${height / 2}px 0 ${height / 2}px ${width}px`\n\n    default: throw new Error('Passed invalid argument to triangle, please pass correct poitingDirection e.g. \\'right\\'.')\n  }\n}\n\n// needed for border-color\nconst reverseDirection = {\n  left: 'right',\n  right: 'left',\n  top: 'bottom',\n  bottom: 'top',\n}\n\nconst triangle = ({ pointingDirection, width, height, color } : TriangleArgs) => ({\n  'border-color': 'transparent',\n  'width': '0',\n  'height': '0',\n  'border-width': getBorderWidth({ height, width, pointingDirection }),\n  'border-style': 'solid',\n\n  /*\n  * javascript Object sorting orders 'border-color' after 'border-bottom-color'\n  * (bottom-b) is before (bottom-c) - !important is needed\n  * { border-bottom-color: 'red', border-color: 'transparent' }\n  */\n\n  [`border-${reverseDirection[pointingDirection]}-color`]: `${color} !important`,\n})\n\nexport default triangle\n","path":"src/mixins/triangle.js","github":"https://github.com/styled-components/polished/blob/50d3a59765d88c2f9fb8fc024fbab45d2dfbb075/src/mixins/triangle.js#L32-L32"},"errors":[],"examples":[{"description":"// Styles as object usage\n\nconst styles = {\n  ...triangle({ pointing: 'right', width: '100px', height: '100px', color: 'red' })\n}\n\n\n// styled-components usage\nconst div = styled.div`\n  ${triangle({ pointing: 'right', width: '100px', height: '100px', color: 'red' })}\n\n\n// CSS as JS Output\n\ndiv: {\n 'border-color': 'transparent',\n 'border-left-color': 'red !important',\n 'border-style': 'solid',\n 'border-width': '50px 0 50px 100px',\n 'height': '0',\n 'width': '0',\n}"}],"name":"PointingDirection","kind":"typedef","members":{"instance":[],"static":[]},"path":[{"name":"PointingDirection","kind":"typedef"}],"namespace":"PointingDirection"}]
      if (pathname.startsWith('/docs/util')) {
        app.render(req, res, '/docs/util', query)
        return
      }
    }

    handle(req, res, url)
  })
  .listen(3000, (err) => {
    if (err) throw err
    console.log('> Ready on http://localhost:3000')
  })
})
